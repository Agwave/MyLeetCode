假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶





# 超时解答
class Solution:
    def climbStairs(self, n: int) -> int:
        if n == 1:
            return 1
        if n == 2:
            return 2
        return self.climbStairs(n-1)+self.climbStairs(n-2)
        
  
  
  
  
# 数学方法、自答
class Solution:
    def climbStairs(self, n: int) -> int:
        if n == 0:
            return 1
        num = 0
        nums = 0
        if n%2==0:
            m = n//2
        else:
            m = n//2 + 1
        for i in range(m, n+1):
            if n-i <= 2*i-n:
                a = n-i
            else:
                a = 2*i-n
            if a == 0 :
                num = 1
            else:
                num = int(self.factorial(i)/(self.factorial(i-a)*self.factorial(a)))
            nums += num
        return nums
    
    def factorial(self, n):
        if n == 1:
            return 1
        else:
            return n*self.factorial(n-1)






# 参考解答
class Solution:
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        a = 0
        b = 1
        for i in range(n):
            a = a+b
            a,b = b,a
        return b
