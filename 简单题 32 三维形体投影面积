在 N * N 的网格中，我们放置了一些与 x，y，z 三轴对齐的 1 * 1 * 1 立方体。

每个值 v = grid[i][j] 表示 v 个正方体叠放在单元格 (i, j) 上。

现在，我们查看这些立方体在 xy、yz 和 zx 平面上的投影。

投影就像影子，将三维形体映射到一个二维平面上。

在这里，从顶部、前面和侧面看立方体时，我们会看到“影子”。

返回所有三个投影的总面积。

 

示例 1：

输入：[[2]]
输出：5
示例 2：

输入：[[1,2],[3,4]]
输出：17
解释：
这里有该形体在三个轴对齐平面上的三个投影(“阴影部分”)。

示例 3：

输入：[[1,0],[0,2]]
输出：8
示例 4：

输入：[[1,1,1],[1,0,1],[1,1,1]]
输出：14
示例 5：

输入：[[2,2,2],[2,1,2],[2,2,2]]
输出：21
 

提示：

1 <= grid.length = grid[0].length <= 50
0 <= grid[i][j] <= 50





###############自答###############
# C++：88%
class Solution {
public:
    int projectionArea(vector<vector<int>>& grid) {
        int ret = 0;
        int length = grid.size();
        
        vector<int> maxRow(length, 0);
        vector<int> maxCol(length, 0);
        
        for (int i = 0; i < length; ++i) {
            for (int j = 0; j < length; ++j) {
                int temp = grid[i][j];
                if (temp > 0) {
                    ret++;
                    if (temp > maxRow[i])
                        maxRow[i] = temp;
                    if (temp > maxCol[j])
                        maxCol[j] = temp;
                }
            }
        }
        
        for (int i = 0; i < maxRow.size(); ++i)
            ret = ret + maxRow[i];
        
        for (int i = 0; i < maxCol.size(); ++i)
            ret = ret + maxCol[i];
        
        return ret;
    }
};





#############参考解答############
# C++：

class Solution {
public:
    int sum(vector<int> &a){
        int ret = 0;
        for(int n:a)
            ret+=n;
        return ret;
    }
    int projectionArea(vector<vector<int>>& grid) {
        int cnt_button = 0;
        int w= grid.size();
        if(w==0) return 0;
        int h = grid[0].size();
        
        vector<int> col(w,0),row(h,0);
        for(int i = 0 ;i<w;++i)
            for(int j = 0;j<h;++j){
                if(grid[i][j]) cnt_button ++;
                col[i] = max(col[i],grid[i][j]);
                row[j] = max(row[j],grid[i][j]);
            }
        return cnt_button +   sum(col) + sum(row);      
    }
};
