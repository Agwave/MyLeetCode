给你一个整数数组 A，只有可以将其划分为三个和相等的非空部分时才返回 true，否则返回 false。

形式上，如果可以找出索引 i+1 < j 且满足 (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1]) 就可以将数组三等分。

 

示例 1：

输出：[0,2,1,-6,6,-7,9,1,2,0,1]
输出：true
解释：0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1
示例 2：

输入：[0,2,1,-6,6,7,9,-1,2,0,1]
输出：false
示例 3：

输入：[3,3,6,5,-2,2,5,1,-9,4]
输出：true
解释：3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4
 

提示：

3 <= A.length <= 50000
-10^4 <= A[i] <= 10^4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/partition-array-into-three-parts-with-equal-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。




#################自答###############
# python：93%
class Solution:
    def canThreePartsEqualSum(self, A: List[int]) -> bool:
        ret = True
        sumA = 0
        for a in A:
            sumA += a
        mod = sumA % 3
        if mod != 0:
            ret = False
        else:
            sumPart = sumA // 3
        curSum = 0
        part = []
        for i, a in enumerate(A):
            curSum += a
            if curSum == sumPart:
                curSum = 0
                part.append(i)
                if len(part) == 2:
                    break
        if len(part) != 2 or part[-1]+1 == len(A):
            ret = False
        else:
            end = 0
            for a in A[part[-1]+1:]:
                end += a
            if end != sumPart:
                ret = False
        return ret



# C++：54%
class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& A) {
        bool ret = true;
        int sumA = 0;
        for (int i = 0; i < A.size(); i++)
            sumA += A[i];
        int mod = sumA % 3;
        int partSum;
        if (mod != 0)
            ret = false;
        else {
            partSum = sumA / 3;
            int curSum = 0;
            vector<int> part;
            for (int i = 0; i < A.size(); i++) {
                curSum += A[i];
                if (curSum == partSum) {
                    part.push_back(i);
                    curSum = 0;
                    if (part.size() == 2)
                        break;
                }
            }
            if ((part.size() != 2) || (part.back() == A.size()-1))
                ret = false;
            else {
                int end = 0;
                for (int i = part.back()+1; i < A.size(); i++) {
                    end += A[i];
                }
                if (end != partSum)
                    ret = false;
            }
        }
        return ret;
    }
};



###############参考解答#################
# python：
class Solution:
    def canThreePartsEqualSum(self, A: List[int]) -> bool:
        flag = 0
        tot = sum(A)
        if tot//3 != tot/3:
            return False
        left, right = 0, 0
        for i in range(len(A)):
            if left != tot//3:
                left += A[i]
            else:
                flag += 1
                break
        j = len(A)-1
        while j >= 0:
            if right != tot//3:
                right += A[j]
            else:
                flag += 1
                break
            j -= 1
        if flag == 2 and i < j+1:
            return True
        return False



# C++：
static auto _ = [](){
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    return nullptr;
}();

class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& A) {
        int sum = 0, currSum = 0, k = 0;
        for(auto it : A)
            sum += it;
        if(sum % 3 != 0)
            return false;
        for(auto it : A)
        {
            currSum += it;
            if(currSum == sum / 3){
                currSum = 0;
                k++;
            }
        }
        if(currSum == sum / 3)
            k++;
        return k==3;           
    }
};
