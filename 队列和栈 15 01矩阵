给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。

两个相邻元素间的距离为 1 。

示例 1: 
输入:

0 0 0
0 1 0
0 0 0
输出:

0 0 0
0 1 0
0 0 0
示例 2: 
输入:

0 0 0
0 1 0
1 1 1
输出:

0 0 0
0 1 0
1 2 1
注意:

给定矩阵的元素个数不超过 10000。
给定矩阵中至少有一个元素是 0。
矩阵中的元素只在四个方向上相邻: 上、下、左、右。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/01-matrix
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。










#####################自答########################
# python3：75%
class Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
        m, n = len(matrix), len(matrix[0])
        
        for i in range(m):
            for j in range(n):
                t, l = 10001, 10001
                if matrix[i][j] != 0:
                    if i > 0:
                        t = matrix[i-1][j]
                    if j > 0:
                        l = matrix[i][j-1]
                    matrix[i][j] = min(t, l) + 1
                
        for i in range(m-1, -1, -1):
            for j in range(n-1, -1, -1):
                b, r = 10001, 10001
                if matrix[i][j] != 0:
                    if i < m-1:
                        b = matrix[i+1][j]
                    if j < n-1:
                        r = matrix[i][j+1]
                    matrix[i][j] = min(matrix[i][j], min(b, r)+1)
                
        return matrix











#################参考解答############################
# python3：
class Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
        if matrix == []:
            return []
        m, n = len(matrix), len(matrix[0])
        dp = [[float('inf')] * n for _ in range(m)]
        for i in range(m):
            for j in range(n):
                if matrix[i][j] == 0:
                    dp[i][j] = 0
                else:
                    if i > 0:
                        dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)
                    if j > 0:
                        dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)
        for i in range(m - 1, -1, -1):
            for j in range(n - 1, -1, -1):
                if matrix[i][j] == 0:
                    dp[i][j] = 0
                else:
                    if i < m - 1:
                        dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1)
                    if j < n - 1:
                        dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1)
        return dp







