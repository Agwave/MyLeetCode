给你一份『词汇表』（字符串数组） words 和一张『字母表』（字符串） chars。

假如你可以用 chars 中的『字母』（字符）拼写出 words 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。

注意：每次拼写时，chars 中的每个字母都只能用一次。

返回词汇表 words 中你掌握的所有单词的 长度之和。

 

示例 1：

输入：words = ["cat","bt","hat","tree"], chars = "atach"
输出：6
解释： 
可以形成字符串 "cat" 和 "hat"，所以答案是 3 + 3 = 6。
示例 2：

输入：words = ["hello","world","leetcode"], chars = "welldonehoneyr"
输出：10
解释：
可以形成字符串 "hello" 和 "world"，所以答案是 5 + 5 = 10。
 

提示：

1 <= words.length <= 1000
1 <= words[i].length, chars.length <= 100
所有字符串中都仅包含小写英文字母





###############自答#################
# python：80%
class Solution:
    def countCharacters(self, words: List[str], chars: str) -> int:
        ret = 0
        d = {}
        
        for c in chars:
            if c not in d:
                d[c] = 1
            else:
                d[c] += 1
        
        for word in words:
            flag = True
            temp = d.copy()
            for w in word:
                if w not in temp or temp[w] == 0:
                    flag = False
                    break
                else:
                    temp[w] -= 1
            if flag:
                ret += len(word)
                
        return ret
        
        
        
###############参考解答###########
# python：
class Solution:
    def countCharacters(self, words: List[str], chars: str) -> int:
        char_map: Dict[str, int] = {}
        res: int = 0

        for char in chars:
            if char not in char_map:
                char_map[char] = 1
            else:
                char_map[char] += 1

        for word in words:
            for char in word:
                if char not in char_map or word.count(char) > char_map[char]:
                    break
            else:
                res += len(word)
                
        return res
