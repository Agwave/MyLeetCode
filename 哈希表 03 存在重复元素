给定一个整数数组，判断是否存在重复元素。

如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。

示例 1:

输入: [1,2,3,1]
输出: true
示例 2:

输入: [1,2,3,4]
输出: false
示例 3:

输入: [1,1,1,3,3,4,3,2,4,2]
输出: true








################自答###############
# python3：75%
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        ret = set()
        is_duplicate = False
        for num in nums:
            if num in ret:
                is_duplicate = True
                break
            else:
                ret.add(num)
        return is_duplicate







# C++：33%
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_set<int> hashSet;
        bool is_duplicate = false;
        for (int num : nums) {
            if (hashSet.count(num) > 0) {
                is_duplicate = true;
                break;
            } else {
                hashSet.insert(num);
            }
        }
        return is_duplicate;
    }
};







# Java：67%
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> hashSet = new HashSet<>();
        boolean is_duplicate = false;
        for (int num: nums) {
            if (hashSet.contains(num)) {
                is_duplicate = true;
                break;
            } else {
                hashSet.add(num);
            }
        }
        return is_duplicate;
    }
}








##############参考解答###############
# python3：
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        return  len(set(nums)) != len(nums)






# C++：
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        for (size_t i=1; i<nums.size(); ++i) {
            if (nums[i] == nums[i-1]) {
                return true;
            }
        }
        return false;
    }
};

static const auto kSpeedUp = []() {
std::ios::sync_with_stdio(false);
std::cin.tie(nullptr);
return nullptr;
}();






# Java：
import java.util.HashSet;

/*
 * @lc app=leetcode.cn id=217 lang=java
 *
 * [217] 存在重复元素
 */
class Solution {
    public boolean containsDuplicate(int[] nums) {
        if (nums == null || nums.length < 2) {
            return false;
        }

        int max = nums[0];
        int min = nums[0];
        for (int i = 1; i < nums.length; i++) {
            max = Math.max(max, nums[i]);
            min = Math.min(min, nums[i]);
        }
        
        int len = max - min + 1;
        boolean[] bukets = new boolean[len];
        for (int i = 0; i < nums.length; i++) {
            int index = (nums[i] - min) % len;
            if (bukets[index]) {
                return true;
            }
            bukets[index] = true;
        }

        return false;
    }







