给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。

示例 1:

输入: nums = [1,2,3,1], k = 3
输出: true
示例 2:

输入: nums = [1,0,1,1], k = 1
输出: true
示例 3:

输入: nums = [1,2,3,1,2,3], k = 2
输出: false











#########################自答####################3
# python3：0%
class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        num_index = {}
        flag = False
        for index, num in enumerate(nums):
            if num not in num_index:
                num_index[num] = index
            else:
                if index - num_index[num] <= k:
                    flag = True
                    break
                else:
                    num_index[num] = index
        return flag








# C++：87%
class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        unordered_map<int, int> num_count;
        for (int i = 0; i < nums.size(); ++i) {
            if (num_count.count(nums[i]) > 0 && i - num_count[nums[i]] <= k) {
                return true;
            } else {
                num_count[nums[i]] = i;
            }
        }
        return false;
    }
};









#######################参考解答##########################
# python3:
class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        hashmap = {}
        for i, num in enumerate(nums):
            if num in hashmap and i - hashmap[num] <= k:
                return True
            hashmap[num] = i
        return False







# C++:
class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        if (nums.size() < 2 || nums.size() >= 35000) return false;
        map<int, int> M;
        for (int i = 0; i < nums.size(); i++){
            if (M.count(nums[i]) == 0) M[nums[i]] = i;
            else if (i - M[nums[i]] <= k) return true;
            else M[nums[i]] = i;
        }
        return false;
    }
};






