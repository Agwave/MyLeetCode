给定一个二叉树，返回它的中序 遍历。

示例:

输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]
进阶: 递归算法很简单，你可以通过迭代算法完成吗？





#######################自答###################
# C++：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        stack<TreeNode*> stk;
        vector<int> ret;
        TreeNode* node = root;
        
        while (node != nullptr or !stk.empty() ) {
            while (node != nullptr) {
                stk.push(node);
                node = node->left;
            }
            
            node = stk.top();
            stk.pop();
            
            ret.push_back(node->val);
            node = node->right;
        }
        
        return ret;
    }
};








# python3：









#####################参考解答#######################
# C++：
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ret;
        
        stack<TreeNode*> s;
        TreeNode* p=root;
        while(p||!s.empty())
        {
            while(p)
            {
                s.push(p);
                p=p->left;
            }
            if(!s.empty())
            {
                p=s.top();
                s.pop();
                ret.push_back(p->val);
                p=p->right;
            }
            
            
        }
        return ret;
    }





# python3：


