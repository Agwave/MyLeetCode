不使用任何内建的哈希表库设计一个哈希集合

具体地说，你的设计应该包含以下的功能

add(value)：向哈希集合中插入一个值。
contains(value) ：返回哈希集合中是否存在这个值。
remove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。

示例:

MyHashSet hashSet = new MyHashSet();
hashSet.add(1);         
hashSet.add(2);         
hashSet.contains(1);    // 返回 true
hashSet.contains(3);    // 返回 false (未找到)
hashSet.add(2);          
hashSet.contains(2);    // 返回 true
hashSet.remove(2);          
hashSet.contains(2);    // 返回  false (已经被删除)

注意：

所有的值都在 [1, 1000000]的范围内。
操作的总数目在[1, 10000]范围内。
不要使用内建的哈希集合库。







#####################自答####################
# python3：95%
class MyHashSet:
    
    database = set()
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.database = set()

    def add(self, key: int) -> None:
        self.database.add(key)

    def remove(self, key: int) -> None:
        self.database.discard(key)

    def contains(self, key: int) -> bool:
        """
        Returns true if this set contains the specified element
        """
        return key in self.database
        


# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)







# Java：
class MyHashSet {

    boolean[] database = new boolean[10000001];
    /** Initialize your data structure here. */
    public MyHashSet() {
    }
    
    public void add(int key) {
        database[key] = true;
    }
    
    public void remove(int key) {
        database[key] = false;
    }
    
    /** Returns true if this set contains the specified element */
    public boolean contains(int key) {
        return database[key];
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */






# C++：98%
class MyHashSet {

    vector<bool> database;
    
    public:
    /** Initialize your data structure here. */
    MyHashSet() {
        database = vector<bool> (1000001, false);
    }
    
    void add(int key) {
        database[key] = true;
    }
    
    void remove(int key) {
        database[key] = false;
    }
    
    /** Returns true if this set contains the specified element */
    bool contains(int key) {
        return database[key];
    }
};

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet* obj = new MyHashSet();
 * obj->add(key);
 * obj->remove(key);
 * bool param_3 = obj->contains(key);
 */







##################参考解答###################
# python3：
class MyHashSet:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.hash_set = set()
        

    def add(self, key: int) -> None:
        self.hash_set.add(key)

    def remove(self, key: int) -> None:
        if key in self.hash_set:
            self.hash_set.remove(key)
        return self.hash_set

    def contains(self, key: int) -> bool:
        """
        Returns true if this set contains the specified element
        """
        return key in self.hash_set






# Java：
class MyHashSet {
    public static final int MAX_VALUE = 1000000;
    private boolean[] array;
    /** Initialize your data structure here. */
    public MyHashSet() {
        this.array = new boolean [MAX_VALUE + 1];
    }
    
    public void add(int key) {
        this.array[key] = true;
    }
    
    public void remove(int key) {
        this.array[key] = false;
        
    }
    
    /** Returns true if this set contains the specified element */
    public boolean contains(int key) {
        return this.array[key];
    }
}






# C++：
class MyHashSet {
public:
    int s[100000];
    /** Initialize your data structure here. */
    MyHashSet() {
        memset(s,0,sizeof(s));
    }
    
    void add(int key) {
        s[key]++;
    }
    
    void remove(int key) {
        s[key]=0;
    }
    
    /** Returns true if this set contains the specified element */
    bool contains(int key) {
        return s[key];
    }
};

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet* obj = new MyHashSet();
 * obj->add(key);
 * obj->remove(key);
 * bool param_3 = obj->contains(key);
 */






