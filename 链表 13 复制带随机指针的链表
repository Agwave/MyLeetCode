给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。

要求返回这个链表的深拷贝。 

 

示例：



输入：
{"$id":"1","next":{"$id":"2","next":null,"random":{"$ref":"2"},"val":2},"random":{"$ref":"2"},"val":1}

解释：
节点 1 的值是 1，它的下一个指针和随机指针都指向节点 2 。
节点 2 的值是 2，它的下一个指针指向 null，随机指针指向它自己。
 

提示：

你必须返回给定头的拷贝作为对克隆列表的引用。







###################自答###################3
# python3：99%
"""
"""
# Definition for a Node.
class Node:
    def __init__(self, val, next, random):
        self.val = val
        self.next = next
        self.random = random
"""
class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        fakeHead = Node(0, None, None)
        curNode = fakeHead
        oriNode = head
        old_to_new = {}
        while oriNode:
            curNode.next = Node(oriNode.val, None, None)
            curNode.next.random = oriNode.random
            old_to_new[oriNode] = curNode.next
            curNode = curNode.next
            oriNode = oriNode.next
        curNode = fakeHead.next
        while curNode:
            if curNode.random:
                curNode.random = old_to_new[curNode.random]
            curNode = curNode.next
        return fakeHead.next







# C++：89%
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;

    Node() {}

    Node(int _val, Node* _next, Node* _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node* fakeHead = new Node(0, nullptr, nullptr);
        Node* curNode = fakeHead;
        Node* oriNode = head;
        map<Node*, Node*> old_to_new;
        while (oriNode) {
            curNode->next = new Node(oriNode->val, nullptr, nullptr);
            curNode->next->random = oriNode->random;
            old_to_new[oriNode] = curNode->next;
            curNode = curNode->next;
            oriNode = oriNode->next;
        }
        curNode = fakeHead->next;
        while (curNode) {
            if (curNode->random) curNode->random = old_to_new[curNode->random];
            curNode = curNode->next;
        }
        return fakeHead->next;
    }
};







# Java：100%
/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
    public Node copyRandomList(Node head) {
        Node fakeHead = new Node(0, null, null);
        Node curNode = fakeHead;
        Map<Node, Node> old_to_new = new HashMap<>();
        Node oriNode = head;
        while (oriNode != null) {
            curNode.next = new Node(oriNode.val, null, null);
            curNode.next.random = oriNode.random;
            old_to_new.put(oriNode, curNode.next);
            curNode = curNode.next;
            oriNode = oriNode.next;
        }
        curNode = fakeHead.next;
        while (curNode != null) {
            if (curNode.random != null) curNode.random = old_to_new.get(curNode.random);
            curNode = curNode.next;
        }
        return fakeHead.next;
    }
}



        
 
 
 
 
 
 ###################参考解答####################
 # python3：
 """
# Definition for a Node.
class Node:
    def __init__(self, val, next, random):
        self.val = val
        self.next = next
        self.random = random
"""
class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        if not head: return
        pre, cur = ListNode(0), head
        while cur:
            nex = cur.next
            pre.next = cur
            cur.next = ListNode(cur.val)
            pre = cur.next
            cur = nex
        cur = head
        while cur:
            cur.next.random = cur.random.next if cur.random else None
            cur = cur.next.next
        cur, res = head, head.next
        while cur.next:
            nex = cur.next
            cur.next = nex.next
            cur = nex
        return res







# C++：
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;

    Node() {}

    Node(int _val, Node* _next, Node* _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        vector<Node*> f,g;
        Node* temp=head,*ne;
        while(temp!=NULL)
        {
            f.push_back(temp);
            ne=new Node(temp->val,temp->next,temp->random);
            g.push_back(ne);
            temp=temp->next;
        }
        int n=f.size();
        temp=NULL;
        g.push_back(temp);
        Node* x,*y;
        for(int i=0;i<n;i++)
        {
            g[i]->next=g[i+1];
            x=f[i]->random;
            if(x!=NULL)
            {
                for(int j=0;j<n;j++)
                {
                    if(x==f[j])
                    {
                        g[i]->random=g[j];
                        break;
                    }
                }
            }
        }
        return g[0];
    }
};









# Java：
/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) return null;
        Node old_node = head;
        while(old_node != null){
            Node new_node =  new Node(old_node.val,null,null);
            new_node.next = old_node.next;
            old_node.next = new_node;
            old_node = old_node.next.next;
        }
        
        old_node = head;
        while(old_node != null){
            old_node.next.random = old_node.random == null ? null:old_node.random.next;
            old_node = old_node.next.next;
        }
        
        Node new_node = head.next;
        Node new_prev = new_node;
         old_node = head;
        while(old_node != null){
            old_node.next = new_node.next;
            new_node.next = old_node.next == null ? null :old_node.next.next;
            
            old_node = old_node.next;
            new_node = new_node.next;
            
        }
        
        return new_prev;
        
    }


        
 
 
 
 
