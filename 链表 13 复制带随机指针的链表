给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。

要求返回这个链表的深拷贝。 

 

示例：



输入：
{"$id":"1","next":{"$id":"2","next":null,"random":{"$ref":"2"},"val":2},"random":{"$ref":"2"},"val":1}

解释：
节点 1 的值是 1，它的下一个指针和随机指针都指向节点 2 。
节点 2 的值是 2，它的下一个指针指向 null，随机指针指向它自己。
 

提示：

你必须返回给定头的拷贝作为对克隆列表的引用。







###################自答###################3
# python3：96%
"""
# Definition for a Node.
class Node:
    def __init__(self, val, next, random):
        self.val = val
        self.next = next
        self.random = random
"""
class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        dummy = Node(0, None, None)
        ori = head
        cp = dummy
        ori_cp_dict = {}   
        while(ori):
            cp.next = Node(ori.val, None, None)
            cp.next.random = ori.random
            ori_cp_dict[ori] = cp.next
            ori = ori.next
            cp = cp.next
        cp = dummy.next
        while(cp):
            if cp.random:
                cp.random = ori_cp_dict[cp.random]
            cp = cp.next 
        return dummy.next
        
        
 
 
 
 
 
 ###################参考解答####################
 # python3：
 """
# Definition for a Node.
class Node:
    def __init__(self, val, next, random):
        self.val = val
        self.next = next
        self.random = random
"""
class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        if not head: return
        pre, cur = ListNode(0), head
        while cur:
            nex = cur.next
            pre.next = cur
            cur.next = ListNode(cur.val)
            pre = cur.next
            cur = nex
        cur = head
        while cur:
            cur.next.random = cur.random.next if cur.random else None
            cur = cur.next.next
        cur, res = head, head.next
        while cur.next:
            nex = cur.next
            cur.next = nex.next
            cur = nex
        return res
