给定一个非空的整数数组，返回其中出现频率前 k 高的元素。

示例 1:

输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]
示例 2:

输入: nums = [1], k = 1
输出: [1]
说明：

你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。

















# 参考解答1：
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        d = {}
        for num in nums:
            if num not in d:
                d[num] = 1
            else:
                d[num] += 1
        
        d_r = {}
        for key,v in d.items():
            if v not in d_r:
                d_r[v] = [key]
            else:
                d_r[v].append(key)
        
        result = []
        
        for i in range(len(nums), 0, -1):
            if i in d_r:
                result += d_r[i]
                
        return result[:k]









# 参考解答2：
class Solution:
    def topKFrequent(self, nums: 'List[int]', k: 'int') -> 'List[int]':
        c = collections.Counter(nums).most_common(k)
        return [ v for v, _ in c]
