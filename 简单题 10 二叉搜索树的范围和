给定二叉搜索树的根结点 root，返回 L 和 R（含）之间的所有结点的值的和。

二叉搜索树保证具有唯一的值。

 

示例 1：

输入：root = [10,5,15,3,7,null,18], L = 7, R = 15
输出：32
示例 2：

输入：root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
输出：23
 

提示：

树中的结点数量最多为 10000 个。
最终的答案保证小于 2^31。






##################自答##################
# C++：75%
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int L, int R) {
        stack<TreeNode*> stk;
        TreeNode* node = root;
        int ret = 0;
        
        while (node != nullptr || !stk.empty()) {
            while (node != nullptr) {
                stk.push(node);
                node = node->left;
            }
            node = stk.top();
            stk.pop();
            if (node->val >= L && node->val <= R)
                ret += node->val;
            node = node->right;
        }
        
        return ret;
    }
};





###############参考解答#############
# C++：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
static const auto ioSyncOff = []()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	return 0;
}();
class Solution {
public:
    int rangeSumBST(TreeNode* root, int L, int R) {
        int sum=0;
        getvalue(root,L,R,sum);
        return sum;
    }
    void getvalue(TreeNode *root,int L,int R,int &sum)
    {
        if(root==nullptr)
            return ;
        getvalue(root->left,L,R,sum);
        if(root->val>=L&&root->val<=R)
        {
            sum+=root->val;
        }
        else if(root->val>R)
        {
            return ;
        }
        getvalue(root->right,L,R,sum);
        
    }
};
