请考虑一颗二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个 叶值序列 。



举个例子，如上图所示，给定一颗叶值序列为 (6, 7, 4, 9, 8) 的树。

如果有两颗二叉树的叶值序列是相同，那么我们就认为它们是 叶相似 的。

如果给定的两个头结点分别为 root1 和 root2 的树是叶相似的，则返回 true；否则返回 false 。

 

提示：

给定的两颗树可能会有 1 到 100 个结点。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/leaf-similar-trees
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。




###########自答############
# python：50%
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def leafSimilar(self, root1: TreeNode, root2: TreeNode) -> bool:
        ret = True
        stack1, stack2 = [], []
        stack1.append(root1)
        stack2.append(root2)
        list1 = []
        while len(stack1) > 0:
            cur = stack1.pop()
            if cur.left is None and cur.right is None:
                list1.append(cur.val)
            else:
                if cur.right is not None:
                    stack1.append(cur.right)
                if cur.left is not None:
                    stack1.append(cur.left)
        index = 0
        while len(stack2) > 0:
            cur = stack2.pop()
            if cur.left is None and cur.right is None:
                if cur.val != list1[index]:
                    ret = False
                    break
                else:
                    index += 1
            else:
                if cur.right is not None:
                    stack2.append(cur.right)
                if cur.left is not None:
                    stack2.append(cur.left)
        return ret





# C++：51%
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        bool ret = true;
        vector<int> leaf1 = getLeaf(root1);
        vector<int> leaf2 = getLeaf(root2);
        for (int i = 0; i < leaf1.size(); i++) {
            if (leaf1[i] != leaf2[i]) {
                ret = false;
                break;
            }
        }
        return ret;
    }
    
    vector<int> getLeaf(TreeNode* root) {
        vector<int> leaf;
        stack<TreeNode*> stk;
        stk.push(root);
        TreeNode *cur;
        while (stk.size() != 0) {
            cur = stk.top();
            stk.pop();
            if (cur->right == nullptr && cur->left == nullptr) {
                leaf.push_back(cur->val);
            } else {
                if (cur->right != nullptr)
                    stk.push(cur->right);
                if (cur->left != nullptr)
                    stk.push(cur->left);
            }
        }
        return leaf;
    }
};




################参考解答###########
# python：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def leafSimilar(self, root1: TreeNode, root2: TreeNode) -> bool:

        def getLeaves(root):
            leaves = []
            nodeSet = []
            while root is not None or nodeSet:
                while root is not None:
                    nodeSet.append(root.right)
                    if root.left is None and root.right is None:
                        leaves.append(root.val)
                    root = root.left
                root = nodeSet.pop()
            return leaves
     
        
        leaves1 = getLeaves(root1)
        leaves2 = getLeaves(root2)
     
        if len(leaves1) != len(leaves2):
            return False
        else:
            for i in range(len(leaves1)):
                if leaves1[i] == leaves2[i]:
                    continue
                else:
                    return False
            return True


# C++：
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> leaves1;
        vector<int> leaves2;
        helper(root1, leaves1);
        helper(root2, leaves2);
        copy(begin(leaves1), end(leaves1), ostream_iterator<int>(cout, ", "));
        cout << endl;
        copy(begin(leaves2), end(leaves2), ostream_iterator<int>(cout, ", "));
        if(leaves1.size() != leaves2.size()) {
            return false;
        } else {
            for(int i=0; i<leaves1.size(); i++) {
                if(leaves1[i] != leaves2[i]) {
                    return false;
                }
            }
            return true;
        }
    }

    void helper(TreeNode* root, vector<int>& leaves) {
        if(root == NULL) {
            return;
        }
        if(root->left == NULL && root->right == NULL) {
            leaves.push_back(root->val);
        }
        helper(root->left, leaves);
        helper(root->right, leaves);
    }
};
