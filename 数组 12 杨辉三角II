给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。



在杨辉三角中，每个数是它左上方和右上方的数的和。

示例:

输入: 3
输出: [1,3,3,1]
进阶：

你可以优化你的算法到 O(k) 空间复杂度吗？










#####################自答#####################
# python3:96%
class Solution:
    def getRow(self, rowIndex):
        """
        :type rowIndex: int
        :rtype: List[int]
        """
        total = [[1], [1, 1]]
        lastRow = [1, 1]
        for row in range(2, rowIndex+1):
            curRow = [1]
            for i in range(1, row):
                curRow.append(lastRow[i - 1] + lastRow[i])
            curRow.append(1)
            total.append(curRow)
            lastRow = curRow  
        return total[rowIndex]







# C++:
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<vector<int>> total;
        vector<int> lastRow(2, 1);
        
        total.push_back(vector<int>(1, 1));
        total.push_back(vector<int>(2, 1));
        
        for (int row = 2; row < rowIndex + 1; ++row) {
            vector<int> curRow(1, 1);
            for (int i = 1; i < row; ++i) {
                curRow.push_back(lastRow[i] + lastRow[i - 1]);
            }
            curRow.push_back(1);
            total.push_back(curRow);
            lastRow = curRow;
        }
        return total[rowIndex];
    }
};







# Java:
class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<List<Integer>> total = new ArrayList<>();
        List<Integer> lastRow = new ArrayList<>(Arrays.asList(1, 1));
        List<Integer> curRow;
        
        total.add(new ArrayList<>(Arrays.asList(1)));
        total.add(new ArrayList<>(Arrays.asList(1, 1)));
        
        for (int row = 2; row < rowIndex + 1; ++row) {
            curRow = new ArrayList<>(Arrays.asList(1));
            for (int i = 1; i < row; ++i) {
                curRow.add(lastRow.get(i - 1) + lastRow.get(i));
            }
            curRow.add(1);
            total.add(curRow);
            lastRow = curRow;
        }
        return total.get(rowIndex); 
    }
}








#####################参考解答#####################
# python3:
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:

        # 法1：根据组合数公式n!/(i!*(n-i)!)计算
        if rowIndex < 0:
            return []
        factorials = [1]*(rowIndex+1) 
        ans = [1]*(rowIndex+1)
        for i in range(1, rowIndex+1):
            factorials[i] = factorials[i-1]*i # 0!~rowIndex!
        # print(factorials)
        for i in range(rowIndex): # 根据组合数公式计算n!/(i!*(n-i)!)
            ans[i] = factorials[-1]//(factorials[i]*factorials[rowIndex-i])
        return ans
       
       
       
       
       
       
# C++：
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<vector<int>> yang = generate(rowIndex + 1);
        return yang[rowIndex];
    }
    
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> yang;
        
        if(numRows == 0) return yang;
        vector<int> tempLine = {1};
        yang.push_back(tempLine);
        
        for(int i=1; i<numRows; i++) {
            vector<int> curLine = {1};
            for(int j=1; j<yang[i-1].size(); j++) {
                int sum = yang[i-1][j-1] + yang[i-1][j];
                curLine.push_back(sum);
            }
            curLine.push_back(1);
            yang.push_back(curLine);
        }
        
        return yang;
    }
};





# Java:
class Solution {
    public List<Integer> getRow(int rowIndex) {
        Integer [] temp = new Integer[rowIndex+1];
        for(int i = 0;i<=rowIndex;i++){
            for(int j = i ;j>=0;j--){
                if(j==0||j==i){
                    temp[j]=1;
                }else{
                    temp[j]=temp[j]+temp[j-1];
                }
            }
        }
        List<Integer> res = Arrays.asList(temp);
        return res;
    }
}





