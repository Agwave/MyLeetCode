给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL







###################自答####################
# python3：92%
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def rotateRight(self, head: ListNode, k: int) -> ListNode:
        if head == None:
            return head
        fakeHead = ListNode(0)
        fakeHead.next = head
        curNode = lastNode = fakeHead
        length = 0
        while lastNode.next:
            length += 1
            lastNode = lastNode.next
        k = k % length
        if k == 0:
            return fakeHead.next
        count = length - k
        while (count > 0):
            curNode = curNode.next
            count -= 1
        firstNode = curNode.next
        lastNode.next = fakeHead.next
        curNode.next = None
        fakeHead.next = firstNode
        return fakeHead.next






# C++：98%
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (head == NULL) return head;
        ListNode* fakeHead = new ListNode(0);
        fakeHead->next = head;
        ListNode* lastNode = fakeHead;
        ListNode* curNode = fakeHead;
        int length = 0, count = 0;
        while (lastNode->next) {
            length += 1;
            lastNode = lastNode->next;
        }
        k = k % length;
        if (k == 0) return fakeHead->next;
        count = length - k;
        while (count > 0) {
            curNode = curNode->next;
            count -= 1;
        }
        lastNode->next = fakeHead->next;
        fakeHead->next = curNode->next;
        curNode->next = NULL;
        return fakeHead->next;
    }
};








# Java：95%
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null) return head;
        ListNode fakeHead = new ListNode(0);
        fakeHead.next = head;
        ListNode lastNode = fakeHead;
        ListNode curNode = fakeHead;
        int length = 0, count = 0;
        while (lastNode.next != null) {
            length += 1;
            lastNode = lastNode.next;
        }
        k = k % length;
        if (k == 0) return fakeHead.next;
        count = length - k;
        while (count > 0) {
            curNode = curNode.next;
            count -= 1;
        }
        lastNode.next = fakeHead.next;
        fakeHead.next = curNode.next;
        curNode.next = null;
        return fakeHead.next;
    }
}









##################参考解答#################
# python3：
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def rotateRight(self, head: ListNode, k: int) -> ListNode:
        n = 1
        tail = head
        while tail and tail.next:
            n += 1
            tail = tail.next

        k %= n
        if k == 0:
            return head

        k = n - k - 1
        tail = head
        while k > 0:
            tail = tail.next
            k -= 1
            
        sub_tail = tail
        sub_head = tail.next
        while tail and tail.next:
            tail = tail.next
            
        tail.next = head
        sub_tail.next = None
        return sub_head








# C++：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (!head || !head->next) return head;
        ListNode* fast = head;
        ListNode* slow = head;
        int n = 0;
        while (fast) {
            n++;
            fast = fast->next;
        }
        k %= n;
        fast = head;
        for (int i = 0; i < k; i++) {
            if (fast) {
                fast = fast->next;
            }
        }
        if (!fast) return head->next;
        while (fast->next) {
            fast = fast->next;
            slow = slow->next;
        }
        fast->next = head;
        fast = slow->next;
        slow->next = NULL;
        return fast;
    }
};







# Java：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || k <= 0) {
            return head;
        }
        // 先求链表长度
        int len = 1;
        ListNode tail = head;
        while (tail.next != null) {
            tail = tail.next;
            len++;
        }
        // 再求倒数k节点以及前一个节点
        k = k % len;
        if (k == 0) {
            return head;
        }
        int count = 0;
        ListNode slow = head, fast = head, slowPre = head;
        while (fast != null) {
            fast = fast.next;
            if (count == k) {
                slowPre = slow;
                slow = slow.next;
            } else {
                count++;
            }
        }
        slowPre.next = null;
        tail.next = head;
        return slow;
    }
}






