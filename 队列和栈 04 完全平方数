给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

示例 1:

输入: n = 12
输出: 3 
解释: 12 = 4 + 4 + 4.
示例 2:

输入: n = 13
输出: 2
解释: 13 = 4 + 9.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/perfect-squares
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。











###############自答###############
# python3：
class Solution:
    def numSquares(self, n: int) -> int:
        q = list()
        q.append((n, 0))
        visited = [False for _ in range(n+1)]
        visited[n] = True
        
        while any(q):
            num, step = q.pop(0)
            i = 1
            tNum = num - i**2
            while tNum >= 0:
                if tNum == 0:
                    return step+1
                if not visited[tNum]:
                    q.append((tNum, step+1))
                    visited[tNum] = True
                i += 1
                tNum = num - i**2








####################参考解答#####################
# Python3：
class Solution:
    #四平方定理
    #Lagrange's Four Square theorem：
    # 每个正整数均可表示为4个整数（包括0）的平方和，
    # 所以只有四种可能结果，即[1,2,3,4]
    #Legendre's three-square theorem：
    # 非4^a(8b+7)型的正整数都可以用三个整数的平方和表示，
    # 所以对于可以写成4^a(8b+7）类型的n，其结果只能为4
    #https://blog.csdn.net/qq_17550379/article/details/80875782
    def numSquares(self, n):
        while n%4 == 0:
            n /= 4
        if n % 8== 7:
            return 4

        a = 0
        while a*a <= n:
            b = int((n- a*a)**0.5)
            if a*a + b*b == n:
                return (not not a) + (not not b) #新技能，get！！！
            a += 1

        return 3
