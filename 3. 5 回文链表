请判断一个链表是否为回文链表。

示例 1:

输入: 1->2
输出: false
示例 2:

输入: 1->2->2->1
输出: true
进阶：
你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？





#  我的解答
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        dummy = ListNode(0)
        dummy.next = head
        
        List = []
        p = dummy
        
        while p.next:
            p = p.next
            List.append(p.val)
        
        k = len(List)
        for i in range(k//2):
            if List[i] != List[k-i-1]:
                return False
        
        return True



# 参考解答
class Solution:
    def isPalindrome(self, head: 'ListNode') -> 'bool':
        def reverse(h: ListNode) -> ListNode:
            prev = None
            while h:
                next = h.next
                h.next = prev
                prev, h = h, next
            return prev

        fast, slow = head, head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        slow = slow.next if fast else slow

        p, q = head, reverse(slow)
        while q:
            if p.val != q.val:
                return False
            p, q = p.next, q.next
