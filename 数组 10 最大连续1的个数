给定一个二进制数组， 计算其中最大连续1的个数。

示例 1:

输入: [1,1,0,1,1,1]
输出: 3
解释: 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3.
注意：

输入的数组只包含 0 和1。
输入数组的长度是正整数，且不超过 10,000。










##########################自答#######################
# python3：
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        n = len(nums)
        j = 0
        count = 0
        for i in range(n):
            if nums[i] == 0:
                count = max(count, i - j)
                j = i + 1
        count = max(count, i - j + 1)
        return count




# C++：
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        int j = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (count < i - j) count = i - j;
                j = i + 1;
            }
        }
        if (count < n - j) count = n - j;
        return count;
    }
};



# Java：
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int n = nums.length;
        int count = 0;
        int j = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (count < i - j) count = i - j;
                j = i + 1;
            }  
        }
        if (count < n - j) count = n - j;
        return count;
    }
}





########################参考解答#######################
# python3：
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        count = 0
        cmax = 0
        for num in nums:
            if num == 1:
                count += 1
            else:
                if count > cmax:
                    cmax = count
                count = 0
        return cmax if cmax > count else count




# C++：
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int count = 0;
        int temp = 0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==1)
                temp++;
            else{
                if(temp>count)
                    count=temp;
                temp=0;
            }
        }
        //nums.size==0的情况
        if(temp>count)
            count=temp;
        
        return count;
 
    }
};



# Java：
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int left = 0;
        int right = 0;
        int i = 0;

        int maxConsecutive = 0;
        while(i<nums.length) {
            while(i<nums.length && nums[i]!=1) i++;

            left = i;

            while(i<nums.length && nums[i]==1) i++;

            right = i;

            maxConsecutive = Math.max(maxConsecutive, right - left);

            i++;
        }

        return  maxConsecutive;
    }
}




