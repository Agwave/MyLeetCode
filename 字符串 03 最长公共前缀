编写一个函数来查找字符串数组中的最长公共前缀。

如果不存在公共前缀，返回空字符串 ""。

示例 1:

输入: ["flower","flow","flight"]
输出: "fl"
示例 2:

输入: ["dog","racecar","car"]
输出: ""
解释: 输入不存在公共前缀。
说明:

所有输入只包含小写字母 a-z 。











########################自答##########################
# python3（48%）

class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if len(strs) == 0:
            return ""
        index = -1
        flag = True
        for i in range(len(strs[0])):
            for j in range(len(strs)):
                if len(strs[j]) <= i or strs[0][i] != strs[j][i]:
                    flag = False
            if flag:
                index = i
            else:
                break
        return strs[0][:index+1]






# C++
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if (strs.size() == 0) return "";
        int index = -1;
        bool flag = true;
        for (int i = 0; i < strs[0].size(); ++i) {
            for (int j = 0; j < strs.size(); ++j) {
                if (strs[j].size() <= i or strs[0][i] != strs[j][i]) {
                    flag = false;
                }
            }
            if (flag) {
                index = i;
            } 
            else {
                break;
            }
        }
        return strs[0].substr(0, index+1);
    }
};





# Java
class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) return "";
        int index = -1;
        boolean flag = true;
        for (int i = 0; i < strs[0].length(); ++i) {
            for (int j = 0; j < strs.length; ++j) {
                if (strs[j].length() <= i || strs[0].charAt(i) != strs[j].charAt(i)) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                index = i;
            } else {
                break;
            }
        }
        return strs[0].substring(0, index+1);
    }
}







#######################参考解答#######################
# python3

class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        result = ''
        for temp in zip(*strs):
            temp_set = set(temp)
            if len(temp_set) == 1:
                result = result + temp[0]
            else:
                break
        return result





# C++
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        string prefix = "";
        for(int idx=0; strs.size()>0; prefix+=strs[0][idx], idx++)
            for(int i=0; i<strs.size(); i++)
                if(idx >= strs[i].size() ||(i > 0 && strs[i][idx] != strs[i-1][idx]))
                    return prefix;
        return prefix;
    }
};




# Java
class Solution {
    public String longestCommonPrefix(String[] strs) {
         if (strs == null || strs.length == 0)
            return "";
        StringBuilder sb = new StringBuilder(strs[0]);
        if (strs.length == 1)
            return sb.toString();
        int i = sb.length() - 1, j = 1;
        while (i>=0 && j<strs.length){
            if(strs[j].indexOf(sb.toString()) !=0){
                sb.deleteCharAt(i);
                i--;
            }else
                j++;
        }

        return sb.toString();
    }
}




