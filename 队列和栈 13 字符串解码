给定一个经过编码的字符串，返回它解码后的字符串。

编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。

你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。

此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。

示例:

s = "3[a]2[bc]", 返回 "aaabcbc".
s = "3[a2[c]]", 返回 "accaccacc".
s = "2[abc]3[cd]ef", 返回 "abcabccdcdcdef".








##################自答##########################
# python3：61%
class Solution:
    def decodeString(self, s: str) -> str:
        stack, ret, num = [], '', 0
        for c in s:
            if c == '[':
                stack.append([ret, num])
                ret, num = '', 0
            elif c == ']':
                last_ret, cur_num = stack.pop()
                ret = last_ret + cur_num * ret
            elif '0' <= c <= '9':
                num = 10 * num + int(c)
            else:
                ret += c
        return ret








# C++：100%
class Solution {
public:
    string decodeString(string s) {
        stack<string> stack1;
        stack<int> stack2;
        string ret = "", last_ret = "";
        int num = 0, cur_num = 0;
        for (char c: s) {
            if (c == '[') {
                stack1.push(ret);
                stack2.push(num);
                ret.clear();
                num = 0;
            } else if (c == ']') {
                last_ret = stack1.top();
                cur_num = stack2.top();
                stack1.pop();
                stack2.pop();
                for (int i = 0; i < cur_num; ++i) {
                    last_ret += ret;
                }
                ret = last_ret;
            } else if (c >= '0' && c <= '9') {
                num = 10 * num + c - '0';
            } else {
                ret += c;
            }
        }
        return ret;
    }
};






####################参考解答#######################
# python3：
class Solution:
    def decodeString(self, s: str) -> str:
        stack, ret, num = [], '', 0
        for c in s:
            if c == '[':
                stack.append([ret, num])
                ret, num = '', 0
            elif c == ']':
                last_ret, cur_num = stack.pop()
                ret = last_ret + cur_num * ret
            elif '0' <= c <= '9':
                num = 10 * num + int(c)
            else:
                ret += c
        return ret







# C++：
class Solution {
public:
    string decodeString(string s) {
        int size = s.size();
        int num = 0;
        stack<int> numstack;
        stack<string> strstack;
        string cur = "";
        string result = "";
        for (int i=0; i<size; ++i)
        {
            if(s[i]>='0' && s[i]<='9')
            {
                num = 10*num + s[i] - '0';  //可能会有连续整数，比如100，所以要记录
            }
            else if(s[i] == '[')
            {
                numstack.push(num);
                strstack.push(cur);
                cur = "";
                num = 0;
            }
            else if((s[i]>='a' && s[i]<='z') || (s[i]>='A' && s[i]<='Z'))
            {
                cur += s[i];
            }
            else if(s[i] == ']')
            {
                int k = numstack.top();
                numstack.pop();
                for(int j=0; j<k; ++j)
                    strstack.top() += cur;
                cur = strstack.top();
                strstack.pop();
            }
        }
        result = result + cur;
        return result;
    }
};





