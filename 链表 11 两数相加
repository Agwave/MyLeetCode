









################自答################3
# python3：89%
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        fakeHead = ListNode(0)
        curNode = fakeHead
        flag = False
        while l1 and l2:
            newVal = l1.val + l2.val
            if flag:
                newVal += 1
            addNode = ListNode(newVal % 10)
            if newVal >= 10:
                flag = True
            else:
                flag = False
            curNode.next = addNode
            curNode = curNode.next
            l1 = l1.next
            l2 = l2.next
        
        
    
        while l1:
            newVal = l1.val
            if flag:
                newVal += 1
                flag = False
            addNode = ListNode(newVal % 10)
            if newVal >= 10:
                flag = True
                curNode.next = addNode
                curNode = curNode.next
                l1 = l1.next
            else:
                curNode.next = addNode
                curNode = curNode.next
                l1 = l1.next
                curNode.next = l1
                break
        
        while l2:
            newVal = l2.val
            if flag:
                newVal += 1
                flag = False
            addNode = ListNode(newVal % 10)
            if newVal >= 10:
                flag = True
                curNode.next = addNode
                curNode = curNode.next
                l2 = l2.next
            else:
                curNode.next = addNode
                curNode = curNode.next
                l2 = l2.next
                curNode.next = l2
                break
        
        if l1 is None and l2 is None and flag == True:
            curNode.next = ListNode(1)
        
        return fakeHead.next







# C++：77%
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* fakeHead = new ListNode(0);
        ListNode* curNode = fakeHead;
    
        int carry = 0, num = 0, val1 = 0, val2 = 0;
        while (l1 || l2 || carry) {
            if (l1) {
                val1 = l1->val;
            } else {
                val1 = 0;
            }
            if (l2) {
                val2 = l2->val;
            } else {
                val2 = 0;
            }
            num = val1 + val2 + carry;
            carry = 0;
            if (num >= 10) carry = 1;
            curNode->next = new ListNode(num%10);
            curNode = curNode->next;
            if (l1) l1 = l1->next;
            if (l2) l2 = l2->next;
        }
        return fakeHead->next;
    }
};






# Java：37%
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode fakeHead = new ListNode(0);
        ListNode curNode = fakeHead;
        int carry = 0, num = 0, val1 = 0, val2 = 0;
        while (l1 != null || l2 != null || carry == 1) {
            val1 = l1 == null ? 0 : l1.val;
            val2 = l2 == null ? 0 : l2.val;
            num = val1 + val2 + carry;
            curNode.next = new ListNode(num%10);
            curNode = curNode.next;
            carry = 0;
            if (num >= 10) carry = 1;
            if (l1 != null) l1 = l1.next;
            if (l2 != null) l2 = l2.next;
        }
        return fakeHead.next;
    }
}








#################参考解答###################
# python3：
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        result = ListNode(0)
        result_tail = result
        carry = 0
        while l1 or l2 or carry:
            v1 = l1.val if l1 else 0
            v2 = l2.val if l2 else 0
            num = v1+v2+carry
            carry = num//10
            out = num%10
            result_tail.next = ListNode(out)
            result_tail = result_tail.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        return result.next






# C++：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        // check
        if(l1==nullptr) return l2;
        if(l2==nullptr) return l1;
        
        // dummy 节点
        ListNode* dummy = new ListNode(0);
        ListNode* node = dummy;
        // 
        int carry = 0;
        while(l1!=nullptr || l2!=nullptr){
            int x1 = l1==nullptr?0:l1->val;
            int x2 = l2==nullptr?0:l2->val;
            
            int sum = x1 + x2 + carry;
            
            carry = sum / 10;
            sum = sum % 10;
            
            node->next = new ListNode(sum);
            
            node = node->next;
            
            if(l1!=nullptr) l1=l1->next;
            if(l2!=nullptr) l2=l2->next;
        }
        
        if(carry == 1)  node->next = new ListNode(1);
        
        return dummy->next;
    }
};





# Java：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null && l2 == null){
            return null;
        }else if(l1 == null){
            return l2;
        }else if(l2 == null){
            return l1;
        }

        ListNode currL1 = l1;
        ListNode currL2 = l2;
        int temp;
        int carry = 0;
        while((currL1 != null ||  currL2 !=null)){
            if(currL2 != null){
                temp = currL1.val + currL2.val + carry;
                currL2 = currL2.next;
            }else{
                temp = currL1.val + carry;
            }

            if(temp >= 10){
                currL1.val =temp - 10;
                carry = 1;
            }else{
                currL1.val = temp;
                carry = 0;
            }

            if(currL1.next == null && (currL2 !=null || carry > 0 )){
                currL1.next = new ListNode(0);
            }
            currL1 = currL1.next;
        }
        return l1;
    }
}







