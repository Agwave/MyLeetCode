给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。

例如：

输入: 二叉搜索树:
              5
            /   \
           2     13

输出: 转换为累加树:
             18
            /   \
          20     13

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/convert-bst-to-greater-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。






####################自答#####################
# C++：99% 迭代做法
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        int sum = 0, temp;
        stack<TreeNode*> stk;
        TreeNode* node = root;
        
        while (node != nullptr || !stk.empty()) {
            while (node != nullptr) {
                stk.push(node);
                node = node->right;
            }
            
            node = stk.top();
            stk.pop();
            temp = sum;
            sum += node->val;
            node->val += temp;
            
            node = node->left;
        }
        
        return root;
    }
};






###################参考解答##################
# C++：递归做法
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int BST(TreeNode* root,int pre) {
        if(root==NULL)
            return pre;
        
        root->val+=BST(root->right,pre);
        return BST(root->left,root->val);        
}
    TreeNode* convertBST(TreeNode* root) {
        BST(root,0);
        return root;
    }
};
