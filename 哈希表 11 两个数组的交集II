给定两个数组，编写一个函数来计算它们的交集。

示例 1:

输入: nums1 = [1,2,2,1], nums2 = [2,2]
输出: [2,2]
示例 2:

输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出: [4,9]
说明：

输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。
我们可以不考虑输出结果的顺序。
进阶:

如果给定的数组已经排好序呢？你将如何优化你的算法？
如果 nums1 的大小比 nums2 小很多，哪种方法更优？
如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？









###########################自答#################3333333
# python3：60%
class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        num_count = {}
        ret = []
        for num in nums1:
            if num not in num_count:
                num_count[num] = 1
            else:
                num_count[num] += 1
        for num in nums2:
            if num in num_count and num_count[num] > 0:
                ret.append(num)
                num_count[num] -= 1
        return ret







# C++：96%
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int, int> num_count;
        vector<int> ret;
        for (int num: nums1) {
            num_count[num]++;
        }
        for (int num: nums2) {
            if (num_count.count(num) > 0 && num_count[num] > 0) {
                ret.push_back(num);
                num_count[num]--;
            }
        }
        return ret;
    }
};








#######################参考解答####################
# python3：
class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        nums1_count=collections.Counter(nums1)
        nums2_count=collections.Counter(nums2)
        nums1_list=list(nums1_count.keys())
        nums2_list=list(nums2_count.keys())
        new_list=[]
        for key in nums1_list:
            new_list.extend([key]*min(nums1_count[key],nums2_count[key]))
        return new_list






# C++：
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        
        int n1=nums1.size(),n2=nums2.size();
        if(n1==0||n2==0)
            return ans;
        std::sort(nums1.begin(),nums1.end());
        std::sort(nums2.begin(),nums2.end());
        int p1=0,p2=0;
        
        while(p1<n1&&p2<n2){
            if(nums1[p1]==nums2[p2]){
                ans.push_back(nums1[p1]);
                p1++;
                p2++;
            }
            else if(nums1[p1]>nums2[p2]){
                p2++;
            }
            else if(nums1[p1]<nums2[p2]){
                p1++;
            }
        }
        return ans;
        
    }
};






