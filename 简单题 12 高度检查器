学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。

请你返回至少有多少个学生没有站在正确位置数量。该人数指的是：能让所有学生以 非递减 高度排列的必要移动人数。

 

示例：

输入：[1,1,4,2,1,3]
输出：3
解释：
高度为 4、3 和最后一个 1 的学生，没有站在正确的位置。
 

提示：

1 <= heights.length <= 100
1 <= heights[i] <= 100






#################自答################
# C++：85%
class Solution {
public:
    int heightChecker(vector<int>& heights) {
        int ret = 0;
        vector<int> sort_heights;
        sort_heights.assign(heights.begin(), heights.end());
        
        quickSort(sort_heights, 0, sort_heights.size()-1);
        
        for (int i = 0; i < heights.size(); ++i) {
            cout << heights[i] << sort_heights[i] << endl;
            if (heights[i] != sort_heights[i])
                ret++;
        }
        
        return ret;
    }
    
private:
    void quickSort(vector<int>& a, int left, int right) {
        int i, j, t, temp;
        
        if (left > right) return;
        
        temp = a[left];
        
        i = left;
        j = right;
        
        while (i != j) {
            while (a[j] >= temp && i < j)   j--;
            while (a[i] <= temp && i < j)   i++;
            
            if (i != j) {
                t = a[i];
                a[i] = a[j];
                a[j] = t;
            }
        }
        
        a[left] = a[i];
        a[i] = temp;
        
        quickSort(a, left, i-1);
        quickSort(a, i+1, right);
    }
};





################参考解答#############
# C++：
class Solution {
public:
    int heightChecker(vector<int>& heights) {
        if(heights.size()<=1)
            return 0;
        vector<int>ans(heights);
        sort(ans.begin(),ans.end());
        int n=0;
        for(int i=0;i<ans.size();i++)
        {
            if(ans[i]!=heights[i])
                n++;
        }
        return n;
        
    }
};
