给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。

如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。

 

示例 1：

输入：arr = [1,2,2,1,1,3]
输出：true
解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。
示例 2：

输入：arr = [1,2]
输出：false
示例 3：

输入：arr = [-3,0,1,-3,1,1,1,-3,10,0]
输出：true
 

提示：

1 <= arr.length <= 1000
-1000 <= arr[i] <= 1000






#############自答##############
# C++:80%
class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        map<int, int> m;
        unordered_set<int> set;
        
        for (int num: arr)
            m[num]++;
        
        for (auto c: m) {
            if (set.count(c.second) == 0)
                set.insert(c.second);
        }
        
        cout << m.size() << endl;
        return m.size() == set.size();
        
        
    }
};





###########参考解答#############
# C++:
class Solution {
public:
	bool uniqueOccurrences(vector<int>& arr) {
		ios::sync_with_stdio(0); cin.tie(0);
		unordered_map<int, int> dict;
		for (auto i : arr)dict[i]++;
		vector<int> ret;
		for (auto it = dict.begin(); it != dict.end(); it++)ret.push_back(it->second);
		unordered_set<int> ds(ret.begin(), ret.end());
		return ds.size() == ret.size();
	}
};
