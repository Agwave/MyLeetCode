给定一个整数，写一个函数来判断它是否是 3 的幂次方。

示例 1:

输入: 27
输出: true
示例 2:

输入: 0
输出: false
示例 3:

输入: 9
输出: true
示例 4:

输入: 45
输出: false
进阶：
你能不使用循环或者递归来完成本题吗？









# 自答：
class Solution:
    def isPowerOfThree(self, n: int) -> bool:
        i = 0
        if n <= 0:
            return False
        while(not (n>=3**i and n<3**(i+1))):
            i += 1
        return n==3**i






# 参考解答：循环
class Solution:
    def isPowerOfThree(self, n: int) -> bool:
        while n > 1:
            if n % 3 != 0:
                break
            n /= 3
        return n == 1
        
        
        
        
        
        
        
# 参考解答：递归
class Solution:
    def isPowerOfThree(self, n):
        """
        :type n: int
        :rtype: bool
        """
        if n <= 0:
            return False
        if n == 1:
            return True
        if n % 3 != 0:
            return False
        return self.isPowerOfThree(n // 3)
        
        
        
        
        
# 进阶挑战
class Solution:
    def isPowerOfThree(self, n):
        """
        :type n: int
        :rtype: bool
        """
        return n > 0 and 3**19 % n == 0
        
