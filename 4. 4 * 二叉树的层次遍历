给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]



# 借鉴自写
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        List = []
        if root == None:
            return List
        List.append([root.val])
        layer_roots= [root]
        while len(layer_roots)>0:
            layer_values = []
            next_layer_roots = []
            for layer in layer_roots:
                if layer.left:
                    next_layer_roots.append(layer.left)
                    layer_values.append(layer.left.val)
                if layer.right:
                    next_layer_roots.append(layer.right)
                    layer_values.append(layer.right.val)
            if len(layer_values)>0:
                List.append(layer_values)
            layer_roots = next_layer_roots
        return List
        
        
        
# 参考解答
class Solution:
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        result = []
        if root == None:
            return result
        up_layer = [root]
        layer_vals = [root.val]
        result.append(layer_vals)
        while len(up_layer)>0:
            layer_values = []
            next_layer = []
            for node in up_layer:
                if (node.left != None):
                    next_layer.append(node.left)
                    layer_values.append(node.left.val)
                if (node.right != None):
                    next_layer.append(node.right)
                    layer_values.append(node.right.val)
            if (len(layer_values)>0):
                result.append(layer_values)
            up_layer = next_layer
        return result




# 第一次复习
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if root == None:
            return []
        List = [[root.val]]
        layer_roots = [root]
        while(len(layer_roots) > 0):
            next_layer_roots = []
            layer_list = []
            for root in layer_roots:
                if root.left:
                    layer_list.append(root.left.val)
                    next_layer_roots.append(root.left)
                if root.right:
                    layer_list.append(root.right.val)
                    next_layer_roots.append(root.right)
            if len(layer_list) > 0:
                List.append(layer_list)
            layer_roots = next_layer_roots
        return List
