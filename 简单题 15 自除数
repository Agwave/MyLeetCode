自除数 是指可以被它包含的每一位数除尽的数。

例如，128 是一个自除数，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。

还有，自除数不允许包含 0 。

给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。

示例 1：

输入： 
上边界left = 1, 下边界right = 22
输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
注意：

每个输入参数的边界满足 1 <= left <= right <= 10000。





##################自答###############
# C++：5%
class Solution {
public:
    vector<int> selfDividingNumbers(int left, int right) {
        vector<int> ret;
        for (int i = left; i <= right; ++i) {
            
            int n = i;
            set<int> s;
            
            while (n > 0) {
                if (s.count(n % 10) == 0)
                    s.insert(n % 10);
                n /= 10;             
            }
            
            set<int>::iterator it;
            bool flag = true;
            
            for (it = s.begin(); it != s.end(); ++it) {
                if (*it == 0 || i % *it != 0) {
                    flag = false;
                    break;
                }
            }
            
            if (flag)
                ret.push_back(i);
        }
        
        return ret;
    }
};






################参考解答########################
# C++：
class Solution {
public:
    vector<int> selfDividingNumbers(int left, int right) {
        vector<int> res;
        for(int i = left;i<=right;++i) {
            if(judge(i)==true) 
                res.push_back(i);
        }
        return res;
    }

    bool judge(int num) {
        int x = 0;
        int n = num;
        while(n!=0) {
            x = n%10;
            if(x == 0) return false;
            if(num%x != 0) return false;
            n =  n/10;
        }
        return true;
    }
};
