给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

示例 1:

输入: [1,2,3]
输出: [1,2,4]
解释: 输入数组表示数字 123。
示例 2:

输入: [4,3,2,1]
输出: [4,3,2,2]
解释: 输入数组表示数字 4321。






# 自答：
# python3：
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        num = 0
        for i in digits:
            num = 10 * num + i
        return [int(x) for x in str(num + 1)]



# Java：
class Solution {
    public int[] plusOne(int[] digits) {
        int n = digits.length;
        for (int i = n-1; i >= 0; --i) {
            if (digits[i] < 9) {
                digits[i] += 1;
                return digits;
            }
            digits[i] = 0;
        }
        int[] res = new int[n+1];
        res[0] = 1;
        return res;
    }
}

# C++：
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int n = digits.size() - 1;
        while(n >= 0){
            if(digits[n] < 9){
                digits[n] += 1;
                return digits;
            }
            digits[n--] = 0;
        }
        vector<int> ret(digits.size() + 1, 0);
            ret[0] = 1;
        return ret;
    }
};



# 参考解答：
# Java：
class Solution {
    public int[] plusOne(int[] digits) {
      int up=1;
        for(int i=digits.length-1;i>=0;--i){
            int temp=digits[i];
            digits[i]=(digits[i]+up)%10;
            up=(temp+up)/10;
        }
        if(up==1){
            int[] arr=new int[digits.length+1];
            arr[0]=1;
            for(int i=1;i<arr.length;++i){
                arr[i]=digits[i-1];
            }
            return arr;
        }
        else return  digits;
    }
}


# C++：
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int n = digits.size();
        int mod = 0;
        bool flag =false;
        for(int i=0; i<n; i++){
            int tmp;
            if(i==0) tmp = digits[n-1-i]+1+mod;
            else tmp = digits[n-1-i]+mod;
            if(tmp==10) {mod = 1;digits[n-1-i] = 0;}
            else {mod = 0;digits[n-1-i] = tmp;}
            if(i==n-1 && tmp==10) flag = true;
        }
        if(flag){
            digits.insert(digits.begin(),1);
        }
        return digits;
    }
};
