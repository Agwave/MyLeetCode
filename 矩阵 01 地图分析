你现在手里有一份大小为 N x N 的『地图』（网格） grid，上面的每个『区域』（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的距离。

我们这里说的距离是『曼哈顿距离』（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。

如果我们的地图上只有陆地或者海洋，请返回 -1。

 

示例 1：



输入：[[1,0,1],[0,0,0],[1,0,1]]
输出：2
解释： 
海洋区域 (1, 1) 和所有陆地区域之间的距离都达到最大，最大距离为 2。
示例 2：



输入：[[1,0,0],[0,0,0],[0,0,0]]
输出：4
解释： 
海洋区域 (2, 2) 和所有陆地区域之间的距离都达到最大，最大距离为 4。
 

提示：

1 <= grid.length == grid[0].length <= 100
grid[i][j] 不是 0 就是 1


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/as-far-from-land-as-possible
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


#################自答###############
# python：
import queue
class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:
        l = len(grid)
        dists = [[0] * l for _ in range(l)]
        q = queue.Queue()
        diretions = [[-1, 0], [0, 1], [1, 0], [0, -1]]
        for i in range(l):
            for j in range(l):
                if grid[i][j] == 0:
                    dists[i][j] = 200
                else:
                    dists[i][j] = 0
                    q.put([i, j])
                    
        if q.qsize() == 0 or q.qsize() == l*l:
            return -1
            
        
        while q.qsize() != 0:
            x, y = q.get()
            for diret in diretions:
                tx, ty = x+diret[0], y+diret[1]
                if tx < 0 or tx >= l or ty < 0 or ty >= l:
                    continue
                if dists[tx][ty] > dists[x][y] + 1:
                    dists[tx][ty] = dists[x][y] + 1
                    q.put([tx, ty])
                    
        ret = 0
        for i in range(l):
            for j in range(l):
                ret = max(ret, dists[i][j])
        
        return ret




###############参考解答#################
# python：
class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:      
        n = len(grid)        
        dist = [[-1 for _ in range(n)] for _ in range(n)]        
        
        q = collections.deque()
        ss = 0
        total = n * n
        
        for i in range(n):
            for j in range(n):
                if grid[i][j]:
                    dist[i][j] = 0
                    q.append((i, j))
                    ss += 1
        
        if ss == total or ss == 0:
            return -1
        
        while q:
            x, y = q.popleft()
            for i, j in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]:
                if 0 <= i < n and 0 <= j < n and dist[i][j] == -1:
                    dist[i][j] = 1 + dist[x][y]
                    ss += 1
                    if ss == total:
                        return dist[i][j]
                    q.append((i, j))
