给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。

函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。

说明:

返回的下标值（index1 和 index2）不是从零开始的。
你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。
示例:

输入: numbers = [2, 7, 11, 15], target = 9
输出: [1,2]
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。










########################自答###########################
# python3
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        left, right = 0, len(numbers) - 1
        while left < right:
            if numbers[left] + numbers[right] == target:
                return [left + 1, right + 1]
            elif numbers[left] + numbers[right] < target:
                left += 1
            else:
                right -= 1



# C++
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int left = 0;
        int right = numbers.size() - 1;
        vector<int> ret;
        while (left < right) {
            if (numbers[left] + numbers[right] < target) left++;
            else if (numbers[left] + numbers[right] > target) right--;
            else {
                ret.push_back(left + 1);
                ret.push_back(right + 1);
                break;
            }
        }
        return ret;
    }
};




# Java(99%)
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int left = 0;
        int right = numbers.length - 1;
        int[] ret = new int[2];
        while (left < right) {
            if (numbers[left] + numbers[right] < target) left++;
            else if (numbers[left] + numbers[right] > target) right--;
            else {
                ret[0] = left + 1;
                ret[1] = right + 1;
                break;
            }
        }
        return ret;
    }
}



#####################参考解答###########################
# python3
class Solution:
    def twoSum(self, nums, target):
        n = len(nums)
        l = 0
        r = n-1
        while l < r:
            if nums[l] + nums[r] > target:
                r -= 1
            elif nums[l] + nums[r] < target:
                l += 1
            else:
                break
        ans = [l+1, r+1]
        return ans




# C++
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> res;
		int l = 0, r = numbers.size()-1;
		while (l < r) {
			if ((numbers[l] + numbers[r]) == target) {
				res.push_back(l+1);
				res.push_back(r+1);
				return res;
			}
			else if ((numbers[l] + numbers[r]) > target)
				r--;
			else
				l++;
		}
		return res;
    }
};




# Java
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        if(numbers == null || numbers.length == 0) return null;

        int[] res = new int[2];
        int low = 0, high = numbers.length-1;
        while(low < high){
            int temp = numbers[low] + numbers[high];
            if(temp == target){
                res[0] = low+1;
                res[1] = high+1;
                return res;
            }else if(temp > target){
                high--;
            }else{
                low++;
            }
        }
        return null;
    }
}



