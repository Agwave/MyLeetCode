设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。

push(x) -- 将元素 x 推入栈中。
pop() -- 删除栈顶的元素。
top() -- 获取栈顶元素。
getMin() -- 检索栈中的最小元素。
示例:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.







# 自答：
class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []

    def push(self, x: int) -> None:
        self.stack.append(x)

    def pop(self) -> None:
        self.stack = self.stack[:-1]

    def top(self) -> int:
        top_num = self.stack.copy()[-1]
        return top_num

    def getMin(self) -> int:
        min = self.stack.copy()[0]
        for num in self.stack.copy():
            if num < min:
                min = num
        return min




# 参考解答1
# 栈的元素是包含两个元素的链表
class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []

    def push(self, x: int) -> None:
        if not self.stack:
            self.stack.append((x, x))
        else:
            self.stack.append((x, min(x, self.stack[-1][1])))

    def pop(self) -> None:
        if self.stack:
            self.stack.pop()

    def top(self) -> int:
        if self.stack:
            return self.stack[-1][0]
        else:
            return None

    def getMin(self) -> int:
        if self.stack:
            return self.stack[-1][1]
        else:
            return None
            
            
         
# 参考解答2：
class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []
        self.minstack = []

    def push(self, x: 'int') -> 'None':
        self.stack.append(x)
        if self.minstack == [] or x<self.getMin():
            self.minstack.append(x)
        else:
            self.minstack.append(self.getMin())

    def pop(self) -> 'None':
        if self.stack == []:
            return
        else:
            self.stack.pop()
            self.minstack.pop()
        

    def top(self) -> 'int':
        return self.stack[-1]

    def getMin(self) -> 'int':
        return self.minstack[-1]
