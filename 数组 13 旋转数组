给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
示例 2:

输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释: 
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]









####################自答##################
# python3：99%
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        i = k % len(nums)
        nums[:] = nums[-i:] + nums[0:-i]
        
        
        



# C++：37%
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int i = k % nums.size();
        vector<int> temp;
        temp.assign(nums.end() - i, nums.end());
        temp.insert(temp.end(), nums.begin(), nums.end() - i);
        nums = temp;
    }
};







# Java：99%
class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        int i = k % n;
        reverse(nums, 0, n - i - 1);
        reverse(nums, n - i, n - 1);
        reverse(nums, 0, n - 1);
    }
    
    public void reverse(int[] nums, int left, int right) {
        int temp;
        while(left < right) {
            temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left++;
            right--;
        }
    }
}








######################参考解答####################
# python3：
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # k=k%len(nums)
        # for i in range(k):
        #     nums.insert(0,nums.pop())
        k=k%len(nums)
        nums[k:], nums[:k]=nums[:-k],nums[-k:]








# C++：
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        k = k % nums.size();
        reverse(nums, 0, nums.size() - k - 1);
        reverse(nums, nums.size() - k, nums.size() - 1);
        reverse(nums, 0, nums.size() - 1);
    }
    
    void reverse(vector<int>& nums, int left, int right){
        while (left < right){
            int leftValue = nums[left];
            nums[left] = nums[right];
            nums[right] = leftValue;
            
            left++;
            right--;
        }
    }
};








# Java：
class Solution {
    
    public void rotate(int[] nums, int k) {
        recursiveSwap(nums, k, 0, nums.length);
    }

    private void recursiveSwap(int[] nums, int k, int start, int length) {
        k %= length;
        if (k != 0) {
            for (int i = 0; i < k; i++) {
                swap(nums, start + i, nums.length - k + i);
            }
            recursiveSwap(nums, k, start + k, length - k);
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
}





