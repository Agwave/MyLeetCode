给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。

 

示例 1：

输入：[-4,-1,0,3,10]
输出：[0,1,9,16,100]
示例 2：

输入：[-7,-3,2,3,11]
输出：[4,9,9,49,121]
 

提示：

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A 已按非递减顺序排序。






################自答###################
# C++：38%
class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        vector<int> ret;
        
        if (A[0] >= 0 && A[A.size()-1] >= 0) {
            
            for (int i = 0; i < A.size(); ++i)
                ret.push_back(pow(A[i], 2));
        }
        
        
        
        else if (A[0] <= 0 && A[A.size()-1] <= 0) {
            
            for (int i = A.size()-1; i >= 0; --i)
                ret.push_back(pow(A[i], 2));
        }
        
        
        
        else if (A[0] < 0 && A[A.size()-1] > 0) {
            
            int split_index, left, right;
            
            for (int i = 0; i <= A.size()-2; ++i) {
                if (A[i] < 0 && A[i+1] >= 0)
                    split_index = i;
            }
            
            left = split_index;
            right = split_index+1;

            while (left >= 0 && right < A.size()) {
                
                if (A[left] + A[right] >= 0) {
                    ret.push_back(pow(A[left], 2));
                    left--;
                } else {
                    ret.push_back(pow(A[right], 2));
                    right++;
                }
            }
            
            if (left < 0)
                for (int i = right; i < A.size(); ++i)
                    ret.push_back(pow(A[i], 2));
            
            if (right >= A.size())
                for (int i = left; i >= 0; --i)
                    ret.push_back(pow(A[i], 2));
        }
        
        return ret;
    }
};






#################参考解答#################
# C++:
class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        vector<int> res (A.size(), 0);
        int i = 0, j = A.size() - 1, k = A.size() - 1;
        while (i <= j) {
            if (A[j]*A[j] > A[i]*A[i]) res[k--] = (A[j]*A[j--]);
            else res[k--] = (A[i]*A[i++]);
        }
        return res;
    }
};
