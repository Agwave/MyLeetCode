



#################自答###############
# C++：13%
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
public:
    stack<TreeNode*> stk;
    
    BSTIterator(TreeNode* root) {
        TreeNode* node = root;
        while (node != nullptr) {
            stk.push(node);
            node = node->left;
        }
    }
    
    /** @return the next smallest number */
    int next() {
        TreeNode* ret = stk.top();
        stk.pop();
        TreeNode* node = ret->right;
        while (node != nullptr) {
            stk.push(node);
            node = node->left;
        }
        return ret->val;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !stk.empty();
    }
};




###############参考解答#################
# C++：思路和我的答案几乎完全一样
class BSTIterator {
public:
    stack<TreeNode*> stk;
    BSTIterator(TreeNode* root) {
        while(root)
        {
            stk.push(root);
            root=root->left;
        }
    }   
    
    /** @return the next smallest number */
    int next() {
        TreeNode *p =stk.top();
        int res= p->val;
        stk.pop();
        p =p->right;
        while(p)
        {
            stk.push(p);
            p=p->left;
        }
        return res;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !stk.empty();
    }
};
