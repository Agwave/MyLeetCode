假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。

你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。

示例 1:

输入:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
输出: ["Shogun"]
解释: 他们唯一共同喜爱的餐厅是“Shogun”。
示例 2:

输入:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
输出: ["Shogun"]
解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。
提示:

两个列表的长度范围都在 [1, 1000]内。
两个列表中的字符串的长度将在[1，30]的范围内。
下标从0开始，到列表的长度减1。
两个列表都没有重复的元素。







####################自答###############
# python3：24%
class Solution:
    def findRestaurant(self, list1: List[str], list2: List[str]) -> List[str]:
        ret_list = []
        dic = {}
        min_index_sum = 2000
        for i, s in enumerate(list1):
            dic[s] = i
        for i, s in enumerate(list2):
            if s in dic:
                if dic[s] + i < min_index_sum:
                    min_index_sum = dic[s] + i
                    ret_list.clear()
                    ret_list.append(s)
                elif dic[s] + i == min_index_sum:
                    ret_list.append(s)
        return ret_list








# C++：28%
class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        vector<string> ret;
        unordered_map<string, int> hashmap1;
        unordered_map<string, int> hashmap2;
        int min_index_sum = 2000;
        for (int i = 0; i < list1.size(); ++i) {
            hashmap1.insert(make_pair(list1[i], i));
        }
        for (int i = 0; i < list2.size(); ++i) {
            hashmap2.insert(make_pair(list2[i], i));
        }
        for (auto key: list1) {
            if (hashmap2.count(key) > 0) {
                if (hashmap1[key] + hashmap2[key] < min_index_sum) {
                    ret.clear();
                    ret.push_back(key);
                    min_index_sum = hashmap1[key] + hashmap2[key];
                } else if (hashmap1[key] + hashmap2[key] == min_index_sum){
                    ret.push_back(key);
                }
            }
        }
        return ret;
    }
};









# Java：68%
class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        List<String> temp = new ArrayList<>();
        Map<String, Integer> hashmap = new HashMap<>();
        int min_index_sum = 2000;
        for (int i = 0; i < list1.length; ++i) {
            hashmap.put(list1[i], i);
        }
        for (int i = 0; i < list2.length; ++i) {
            if (hashmap.containsKey(list2[i])) {
                int sum = hashmap.get(list2[i]) + i;
                if (sum < min_index_sum) {
                    temp.clear();
                    temp.add(list2[i]);
                    min_index_sum = sum;
                } else if (sum == min_index_sum) {
                    temp.add(list2[i]);
                }
            }
        }
        String[] ret = new String[temp.size()];
        temp.toArray(ret);
        return ret;
    }
}









#######################参考解答##################
# Python3：
class Solution:
    def findRestaurant(self, list1: List[str], list2: List[str]) -> List[str]:
        res=[]
        
        dict1={}
        for i in range(len(list1)):
            dict1[list1[i]]=i
            
        dict2={}
        for i in range(len(list2)):
            dict2[list2[i]]=i
        
        
        min_index=float("inf")
        
        for key,value in dict1.items():
            if key in dict2:
                if (value+dict2[key])==min_index:
                    res.append(key)
                if (value+dict2[key])<min_index:
                    res=[]
                    res.append(key)
                    min_index=value+dict2[key]
        
        
        return res






# C++：
class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        int n1 = list1.size(), n2 = list2.size(), min = INT_MAX, sum;
        unordered_map<string, int> m;
        vector<string> res;
        for(int i = 0; i < n1; i++) m[list1[i]] = i;
        for(int i = 0; i < n2; i++) {
            if(m.count(list2[i])) {
                sum = m[list2[i]] + i;
                if(sum < min) {
                    min = sum;
                    res.clear();
                    res.push_back(list2[i]);
                }
                else if(sum == min) res.push_back(list2[i]);
            }
        }
        return res;
    }
};  







# Java：
class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        int l1 = list1.length;
        int l2 = list2.length;
        
        //找到规模更小的数组进行hash化
        if (l1 > l2) {
            return findRestaurant(list2, list1);
        }
        //极端情况下需要考虑rehash
        Map<String, Integer> map = new HashMap<>(l1);
        for(int i=0;i<l1;i++) {
            map.put(list1[i],i);
        }
        int minIndex = Integer.MAX_VALUE;
        List<String> result = new LinkedList<>();
        
        for(int j=0;j<l2 && j<=minIndex;j++) {
            Integer index = map.get(list2[j]);
            if (index != null) {
                if (index + j < minIndex) {
                    minIndex = index + j;
                    result.clear();
                    result.add(list2[j]);
                } else if (index + j == minIndex){
                    result.add(list2[j]);
                }
                
            }
        }
        
        
        return result.toArray(new String[0]);
    }
}






