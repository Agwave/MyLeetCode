给定一个字符串，逐个翻转字符串中的每个单词。

 

示例 1：

输入: "the sky is blue"
输出: "blue is sky the"
示例 2：

输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例 3：

输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 

说明：

无空格字符构成一个单词。
输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 

进阶：

请选用 C 语言的用户尝试使用 O(1) 额外空间复杂度的原地解法。











########################自答############################
# python3：（参考）
class Solution:
    def reverseWords(self, s: str) -> str:
        words = []
        for word in s[::-1].split():
            words.append(word[::-1])
        return ' '.join(words)





# C++：90% 参考
class Solution {
public:
    string reverseWords(string s) {
        stack<string> st;
		string t,ans;
		for (int i = 0; i < s.size(); ++i)
		{
			if (s[i] != ' ')
			{
				while (s[i] != ' ' && i < s.size())
				{
					t += s[i];
					++i;
				}
				st.push(t);
				t.clear();
			}
		}
		while (!st.empty())
		{
			string tmp = st.top();
			st.pop();
			if (tmp != " ")
			{
				if (st.empty())
					ans += tmp;
				else
					ans += tmp + ' ';
			}
		}
		return ans;
    }
};





# Java：99% 参考
public class Solution {
    public String reverseWords(String s) {
        String[] strs = s.split(" ");
        StringBuilder res = new StringBuilder();
        for(int i = strs.length - 1; i >= 0; i--)
        {
            if(strs[i].length() > 0)
            {
                res.append(strs[i]);
                res.append(" ");
            }
        }
        return res.toString().trim();
    }
}






########################参考解答############################
# python3：
class Solution:
    def reverseWords(self, s: str) -> str:
        new_s = s.split(' ')
        n = 0
        i = len(new_s)-1
        restr = ''
        while i+1:
           
            if new_s[i] == '':
                while i and new_s[i-1] == '':
                    i -= 1
            else:
                if n == 1:
                    restr += ' '
              
                restr += new_s[i]
                n = 1
                
            i -= 1
        return restr





# C++：
class Solution {
public:
    string reverseWords(string s) {
        string arg[1000];
        string result="";
        for(int i=0;i<1000;i++){
            arg[i]="";
        }
        //memset(arg,"",sizeof(arg));
        int count =0;
        bool flag=false;
        for(int i=0;i<s.size();i++){
            if(s[i]==' '){
                if(flag){
                    flag=false; 
                    count++;
                }
                if(i==s.size()-1)
                    count--;                    
            }
            else{
                flag=true;
                arg[count]+=s[i];
            }        
        }
        for(int i=count;i>=0;i--){
            result+=arg[i];
            if(i!=0)
                result+=" ";
        }
        return result;
    }
};





# Java：
class Solution {
    public String reverseWords(String s) {
        StringBuilder builder = new StringBuilder(s.length());
        int i = s.length() - 1;
        while (i >= 0) {
            while (i >= 0 && s.charAt(i) == ' ') i--;
            if (i == -1) break;
            
            int j = s.lastIndexOf(' ', i);
            builder.append(s.substring(j + 1, i + 1) + " ");
            i = j - 1;
        }
    
        if (builder.length() > 0) builder.deleteCharAt(builder.length() - 1);
        return builder.toString();
    }
}




