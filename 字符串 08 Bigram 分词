给出第一个词 first 和第二个词 second，考虑在某些文本 text 中可能以 "first second third" 形式出现的情况，其中 second 紧随 first 出现，third 紧随 second 出现。

对于每种这样的情况，将第三个词 "third" 添加到答案中，并返回答案。

 

示例 1：

输入：text = "alice is a good girl she is a good student", first = "a", second = "good"
输出：["girl","student"]
示例 2：

输入：text = "we will we will rock you", first = "we", second = "will"
输出：["we","rock"]
 

提示：

1 <= text.length <= 1000
text 由一些用空格分隔的单词组成，每个单词都由小写英文字母组成
1 <= first.length, second.length <= 10
first 和 second 由小写英文字母组成

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/occurrences-after-bigram
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。




##################自答###############
# python：89%
class Solution:
    def findOcurrences(self, text: str, first: str, second: str) -> List[str]:
        ret = []
        word_list = text.split()
        for i in range(len(word_list)-2):
            if word_list[i] == first and word_list[i+1] == second:
                ret.append(word_list[i+2])
        return ret




# C++：9%
class Solution {
public:
    vector<string> findOcurrences(string text, string first, string second) {
        vector<string> ret;
        string target = first + " " + second;
        int tar_len = target.size();
        int pos;
        for (int i = 0; i < text.size(); i++) {
            pos = text.find(target, i);
            if (pos == text.npos)
                break;
            else if ((pos != 0 && text[pos-1] != ' ') || text[pos+tar_len] != ' ') {
                i = pos + first.size();
                continue;
            }
            else {
                i = pos + tar_len + 1;
                string word = "";
                while (i < text.size() && text[i] != ' ') {
                    word += text[i];
                    i++;
                }
                i = pos + tar_len;
                ret.push_back(word);
            }

        }
        return ret;
    }
};




###############参考解答#################
# python：
class Solution:
    def findOcurrences(self, text: str, first: str, second: str) -> List[str]:
        text = text.split(' ')
        res = []
        for i in range(len(text) - 2):
            if text[i] == first and text[i + 1] == second:
                res.append(text[i + 2])
        return res



# C++：
class Solution {
public:
    vector<string> findOcurrences(string text, string first, string second) {
        vector<string> ans;
        vector<string> temp;
        istringstream ss(text);
        string cnt = "";
        int flag = 0;
        while(ss >> cnt){
            temp.push_back(cnt);
        }
        for(int i=0;i<temp.size();++i){
            if(temp[i]==first && temp[i+1]==second && (i+2 < temp.size())){
                ans.push_back(temp[i+2]);
            }
        }
        return ans;
    }
};
