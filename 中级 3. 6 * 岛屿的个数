给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3






# 平行函数
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        n = len(grid)
        if n == 0: return 0
        m = len(grid[0])
        if m == 0: return 0
        res = 0
        # 遍历每一个字符
        for i in range(n):
            for j in range(m):
                # 如果遍历字符是陆地"1"
                if grid[i][j] == "1":
                    res += 1
                    # 递归查找与这块陆地相连的所有陆地 并将他们改为零
                    self.change(grid, i, j)
        return res

    def change(self, grid, i, j):
        grid[i][j] = "0"
        # 判断上方字符
        if i > 0 and grid[i - 1][j] == "1":
            self.change(grid, i - 1, j)
        # 判断左方字符
        if j > 0 and grid[i][j - 1] == "1":
            self.change(grid, i, j - 1)
        # 判断下方字符
        if i < len(grid) - 1 and grid[i + 1][j] == "1":
            self.change(grid, i + 1, j)
        # 判断右方字符
        if j < len(grid[0]) - 1 and grid[i][j + 1] == "1":
            self.change(grid, i, j + 1)








# 函数的子函数
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        
        def dfs(grid,i,j):
            grid[i][j] = '#'
            if i - 1 >= 0 and grid[i-1][j] == '1':
                dfs(grid,i-1,j)
            if j + 1 < len(grid[0]) and grid[i][j+1] == '1':
                dfs(grid,i,j+1)
            if i + 1 < len(grid) and grid[i+1][j] == '1':
                dfs(grid,i+1,j)
            if j - 1 >= 0 and grid[i][j-1] == '1':
                dfs(grid,i,j-1)
            return
            
        res = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    res += 1
                    dfs(grid,i,j)
        return res
