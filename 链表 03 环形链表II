给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。

说明：不允许修改给定的链表。

 

示例 1：

输入：head = [3,2,0,-4], pos = 1
输出：tail connects to node index 1
解释：链表中有一个环，其尾部连接到第二个节点。


示例 2：

输入：head = [1,2], pos = 0
输出：tail connects to node index 0
解释：链表中有一个环，其尾部连接到第一个节点。


示例 3：

输入：head = [1], pos = -1
输出：no cycle
解释：链表中没有环。


 

进阶：
你是否可以不用额外空间解决此题？







###########################自答########################
# python：69%
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        slower = head
        faster = head
        while faster and faster.next:
            slower = slower.next
            faster = faster.next.next
            if faster == slower:
                ret = 0
                slower = head
                while slower != faster:
                    slower = slower.next
                    faster = faster.next
                return slower
        return None





# C++：97%
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* slower = head;
        ListNode* faster = head;
        while (faster && faster->next) {
            slower = slower->next;
            faster = faster->next->next;
            if (slower == faster) {
                slower = head;
                while (slower != faster) {
                    slower = slower->next;
                    faster = faster->next;
                }
                return slower;
            }
        }
        return NULL;
    }
};





# Java：99%
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slower = head;
        ListNode faster = head;
        while (faster != null && faster.next != null) {
            slower = slower.next;
            faster = faster.next.next;
            if (slower == faster) {
                slower = head;
                while(slower != faster) {
                    slower = slower.next;
                    faster = faster.next;
                }
                return slower;
            }
        }
        return null;
    }
}








###########################参考解答########################
# python：
class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        fast, slow = head, head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            if fast == slow:

                fast = head
                while fast != slow:
                    fast = fast.next
                    slow = slow.next
                return slow

        return None





# C++：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* slow=head;
        ListNode* fast=head;
        bool flag=false;
        if(head==nullptr) return nullptr;
        while(fast->next!=nullptr&&fast->next->next!=nullptr){
            //if() return ans;
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast){
                flag=true;
                break;
            }
        }
        //cout<<slow->val<<fast->val<<endl;
        if(flag){
            fast=head;
            while(slow!=fast){
                slow=slow->next;
                fast=fast->next;
            }
            return slow;
        }
        else return nullptr;
    }
};





# Java：
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
         if(head==null||head.next==null)
            return null;
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null&&fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(fast==slow){
                break;
            }
        }
        if( fast == null || fast.next == null ){
        	return null;
        }
        fast=head;
        while (fast!=slow&&slow.next!=null){
            fast=fast.next;
            slow=slow.next;
        }
        return fast;
    }
}






