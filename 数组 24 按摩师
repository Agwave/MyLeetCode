一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。

注意：本题相对原题稍作改动

 

示例 1：

输入： [1,2,3,1]
输出： 4
解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。
示例 2：

输入： [2,7,9,3,1]
输出： 12
解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。
示例 3：

输入： [2,1,4,5,3,1,1,3]
输出： 12
解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/the-masseuse-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。





#################自答###############
# python：81%
class Solution:
    def massage(self, nums: List[int]) -> int:
        ret = 0
        if len(nums) == 0:
            ret = 0
        elif len(nums) == 1:
            ret = nums[0]
        elif len(nums) == 2:
            ret = max(nums[0], nums[1])
        else:
            status = [0] * len(nums)
            status[0] = nums[0]
            status[1] = max(nums[0], nums[1])
            for i in range(2, len(nums)):
                status[i] = max(status[i-1], status[i-2]+nums[i])
            ret = status[-1]
        return ret




# C++：63%
class Solution {
public:
    int massage(vector<int>& nums) {
        int ret = 0;
        if (nums.size() == 0)
            ret = 0;
        else if (nums.size() == 1)
            ret = nums[0];
        else if (nums.size() == 2)
            ret = max(nums[0], nums[1]);
        else {
            int first = nums[0];
            int second = max(nums[0], nums[1]);
            int tmp = 0;
            for (int i = 2; i < nums.size(); i++) {
                tmp = second;
                second = max(first+nums[i], second);
                first = tmp;
            }
            ret = second;
        }
        return ret;
    }
};




###############参考解答#################
# python：
class Solution:
    def massage(self, nums: List[int]) -> int:
        if not nums:
            return 0
        if len(nums)<3:
            return max(nums)
        f, s = nums[0],nums[1]
        for i in range(2,len(nums)):
            t = max(f+nums[i],s)
            f = max(f,s)
            s = t
        return t



# C++：
class Solution {
public:
    int massage(vector<int>& nums) {
        int len = nums.size();
        if(len == 0) return 0;
        else if(len == 1) return nums[0];
        else if(len == 2) return max(nums[0], nums[1]);
        else{
            vector<int> dp(len, -1);
            dp[0] = nums[0];
            dp[1] = nums[1];
            dp[2]= nums[0]+nums[2];
            int maxNum = max(dp[2], max(dp[0], dp[1]));
            if(len == 3)    return maxNum;
            for(int i = 3; i < len; i++)
            {
                dp[i] = max(dp[i-2], dp[i-3])+nums[i];
                if(dp[i] > maxNum)  maxNum = dp[i];
            }
            return maxNum;
        }
    }
};
