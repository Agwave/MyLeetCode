有 N 个房间，开始时你位于 0 号房间。每个房间有不同的号码：0，1，2，...，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。

在形式上，对于每个房间 i 都有一个钥匙列表 rooms[i]，每个钥匙 rooms[i][j] 由 [0,1，...，N-1] 中的一个整数表示，其中 N = rooms.length。 钥匙 rooms[i][j] = v 可以打开编号为 v 的房间。

最初，除 0 号房间外的其余所有房间都被锁住。

你可以自由地在房间之间来回走动。

如果能进入每个房间返回 true，否则返回 false。

示例 1：

输入: [[1],[2],[3],[]]
输出: true
解释:  
我们从 0 号房间开始，拿到钥匙 1。
之后我们去 1 号房间，拿到钥匙 2。
然后我们去 2 号房间，拿到钥匙 3。
最后我们去了 3 号房间。
由于我们能够进入每个房间，我们返回 true。
示例 2：

输入：[[1,3],[3,0,1],[2],[0]]
输出：false
解释：我们不能进入 2 号房间。
提示：

1 <= rooms.length <= 1000
0 <= rooms[i].length <= 1000
所有房间中的钥匙数量总计不超过 3000。







#####################自答#####################
# python3：43%
class Solution:
    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        # len(visited) == len(rooms) ?
        visited = {0}
        stack = [0]
        while stack:
            key = stack.pop()
            for k in rooms[key]:
                if k not in visited:
                    stack.append(k)
                    visited.add(k)
        return len(visited) == len(rooms)








# C++:80%
class Solution {
public:
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        unordered_set<int> visited;
        stack<int> stk;
        int key;
        
        stk.push(0);
        visited.insert(0);
        
        while (!stk.empty()) {
            key = stk.top();
            stk.pop();
            for (int k: rooms[key]) {
                if (visited.count(k) <= 0) {
                    stk.push(k);
                    visited.insert(k);
                }
            }
            if (visited.size() == rooms.size()) return true;
        }
        return (visited.size() == rooms.size());
    }
};








###################参考解答#######################
# python3:
class Solution:
    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        to_search=[0]
        searched=set()
        while to_search:
            r=to_search.pop()
            if r not in searched:
                searched.add(r)
                if len(searched)==len(rooms):
                    break
                for t in rooms[r]:
                    to_search.append(t)
        return len(searched)==len(rooms)









# C++:
class Solution {
public:
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        int n = rooms.size();
        int visited[1005];
        memset(visited, 0, sizeof visited);
        int cnt = 0;
        queue<int> q;
        q.push(0);
        while (!q.empty()) {
            int key = q.front();
            q.pop();
            if (!visited[key]) ++cnt;
            visited[key] = 1;
            for (auto &i : rooms[key]) {
                if (!visited[i]) q.push(i);
            }
        }
        // cout << cnt;
        return cnt == n;
    }
};








