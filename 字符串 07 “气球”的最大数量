给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 "balloon"（气球）。

字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 "balloon"。

 

示例 1：



输入：text = "nlaebolko"
输出：1
示例 2：



输入：text = "loonbalxballpoon"
输出：2
示例 3：

输入：text = "leetcode"
输出：0
 

提示：

1 <= text.length <= 10^4
text 全部由小写英文字母组成


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-number-of-balloons
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。




#############自答#############
# python：16%
class Solution:
    def maxNumberOfBalloons(self, text: str) -> int:
        ret = len(text)
        d = {'b': 0, 'a': 0, 'l': 0, 'o': 0, 'n': 0}
        for t in text:
            if t in d:
                d[t] += 1
        for k in d.keys():
            cnt = d[k]
            if k in {'l', 'o'}:
                cnt //= 2 
            if cnt < ret:
                ret = cnt
        return ret


# C++：92%
class Solution {
public:
    int maxNumberOfBalloons(string text) {
        int ret = text.length();
        map<char, int> m;
        m.insert(pair<char, int>('b', 0));
        m.insert(pair<char, int>('a', 0));
        m.insert(pair<char, int>('l', 0));
        m.insert(pair<char, int>('o', 0));
        m.insert(pair<char, int>('n', 0));
        for (int i = 0; i < text.length(); i++) {
            if (m.count(text[i])) {
                m[text[i]] += 1;
            }
        }
        map<char, int>::iterator iter;
        int cnt;
        for (iter = m.begin(); iter != m.end(); iter++) {
            cnt = iter->second;
            if (iter->first == 'l' || iter->first == 'o') 
                cnt /= 2;
            if (cnt < ret)
                ret = cnt;
        }
        return ret;
    }
};





##############参考解答##########
# python：
class Solution:
    def maxNumberOfBalloons(self, text: str) -> int:
        l = [
            text.count('a'), 
            text.count('b'), 
            int(text.count('l')/2), 
            text.count('n'), 
            int(text.count('o')/2),
        ]
        return min(l)



# C++：
class Solution 
{
public:
    int maxNumberOfBalloons(string text) 
    {
            int acount = 0;
            int bcount = 0;
            int lcount = 0;
            int ocount = 0;
            int ncount = 0;
        for(int i = 0, N = text.size(); i < N;++i)
        {
            switch(text[i])
            {
                case 'a':
                    ++acount;
                    break;
                case 'b':
                    ++bcount;
                    break;
                case 'l':
                    ++lcount;
                    break;
                case 'o':
                    ++ocount;
                    break;
                case 'n':
                    ++ncount;
                    break;
            }
        }
        lcount >>= 1;
        ocount >>= 1;
        int res = bcount < acount?  bcount : acount;
        res = res > lcount? lcount : res;
        res = res > ocount? ocount : res;
        res = res > ncount? ncount : res;
        return res;
    }
};
