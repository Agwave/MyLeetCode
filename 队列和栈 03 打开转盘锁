你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' 。每个拨轮可以自由旋转：例如把 '9' 变为  '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。

锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。

列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。

字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。

 

示例 1:

输入：deadends = ["0201","0101","0102","1212","2002"], target = "0202"
输出：6
解释：
可能的移动序列为 "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202"。
注意 "0000" -> "0001" -> "0002" -> "0102" -> "0202" 这样的序列是不能解锁的，
因为当拨动到 "0102" 时这个锁就会被锁定。
示例 2:

输入: deadends = ["8888"], target = "0009"
输出：1
解释：
把最后一位反向旋转一次即可 "0000" -> "0009"。
示例 3:

输入: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"
输出：-1
解释：
无法旋转到目标数字且不被锁定。
示例 4:

输入: deadends = ["0000"], target = "8888"
输出：-1
 

提示：

死亡列表 deadends 的长度范围为 [1, 500]。
目标数字 target 不会在 deadends 之中。
每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 '0000' 到 '9999' 中产生。












####################自答########################
# python3：73%
from collections import deque
class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        queue = deque()
        deadends_set = set(deadends)
        
        if '0000' not in deadends_set:
            queue.append(['0000', 0])
        else:
            return -1
        
        while queue:
            node, cnt = queue.popleft()
            if node == target:
                return cnt
                    
            for i in range(4):
                for j in [1, -1]:
                    next_node = node[:i] + str((int(node[i])+j+10)%10) + node[i+1:]
                    if next_node not in deadends_set:
                        deadends_set.add(next_node)
                        queue.append([next_node, cnt+1])
                        
        return -1









####################参考解答########################
# python3：
class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        if '0000' in deadends or target in deadends:
            return -1
        
        def f(a,b,c,d):     #生成下一个组合
            return [((a+1)%10,b,c,d),((a-1)%10,b,c,d),(a,(b+1)%10,c,d),(a,(b-1)%10,c,d),(a,b,(c+1)%10,d),(a,b,(c-1)%10,d),(a,b,c,(d+1)%10),(a,b,c,(d-1)%10)]
        
        ans=1

        ds={tuple(int(i) for i in c) for c in deadends}
        ser={(0,0,0,0)}

        dt=ds.copy()
        tar={tuple(int(c) for c in target)}

        while ser:
            tmp=set()
            for a,b,c,d in ser:
                for j in f(a,b,c,d):
                    if j not in ds and j not in tmp:
                        if j in tar:
                            return ans
                        ds|={j}
                        tmp|={j}
            if not tmp:
                break
            ser=tmp
            ans+=1
            
            tmp=set()
            for a,b,c,d in tar:
                for j in f(a,b,c,d):
                    if j not in dt and j not in tmp:
                        if j in ser:
                            return ans
                        dt|={j}
                        tmp|={j}
            if not tmp:
                break
            tar=tmp
            ans+=1
        
        return -1





