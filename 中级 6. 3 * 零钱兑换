给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。

示例 1:

输入: coins = [1, 2, 5], amount = 11
输出: 3 
解释: 11 = 5 + 5 + 1
示例 2:

输入: coins = [2], amount = 3
输出: -1
说明:
你可以认为每种硬币的数量是无限的。









# 参考解答1：（代码少）
class Solution(object):
    def coinChange(self, coins, amount):
        dp = [amount+1]*(amount+1)
        dp[0] = 0
        for i in range(1,amount+1):
            for j in coins:
                if i >= j:
                    dp[i] = min(dp[i],dp[i-j] + 1)
        return -1 if dp[-1] > amount else dp[-1]
        
        
        
        
        
# 参考解答2：（效率高）
import math
class Solution:
    def coinChange(self, coins: 'List[int]', amount: 'int') -> 'int':
        result = amount + 1
        coins.sort(reverse = True)
        l = len(coins)

        def helper(index,target,count):
            nonlocal result

            if count + math.ceil(target/coins[index]) >= result:
                return

            if target%coins[index] == 0:
                result = count + target//coins[index]

            if index == l-1:
                return 

            for i in range(target//coins[index],-1,-1):
                helper(index+1,target-coins[index]*i,count+i)

        helper(0,amount,0)

        return -1 if result > amount else result







