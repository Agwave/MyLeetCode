给定一个含有 M x N 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。

 

示例:

输入:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

输出:  [1,2,4,7,5,3,6,8,9]

解释:

 

说明:

给定矩阵中的元素总数不会超过 100000 。





#########################自答##########################

# python3：（98%）
class Solution:
    def findDiagonalOrder(self, matrix: List[List[int]]) -> List[int]:
        if matrix == []:
            return []
        m = len(matrix)
        n = len(matrix[0])
        res = [0] * (m * n)
        r = 0
        c = 0
        for i in range(len(res)):
            res[i] = matrix[r][c]
            if (r+c)%2 == 0:
                if c == n-1:
                    r += 1
                elif r == 0:
                    c += 1
                else:
                    r -= 1
                    c += 1
            else:
                if r == m-1:
                    c += 1
                elif c == 0:
                    r += 1
                else:
                    r += 1
                    c -= 1
        return res


  
  
  
  
# C++:
class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
        vector<int> ret;
        if (matrix.empty()) return ret;
        int m = matrix.size();
        int n = matrix[0].size();
        int row = 0;
        int col = 0;
        for (int i = 0; i < m*n; ++i) {
            ret.push_back(matrix[row][col]);
            if ((row+col)%2 == 0) {
                if (col == n-1) {
                    row++;
                } else if (row == 0) {
                    col++;
                } else {
                    row--;
                    col++;
                }
            } else {
                if (row == m-1) {
                    col++;
                } else if (col == 0) {
                    row++;
                } else {
                    row++;
                    col--;
                }
            }
            
        }
        return ret;
    }
};





# Java:(87%)
class Solution {
    public int[] findDiagonalOrder(int[][] matrix) {
        int[] ret1 = new int[0];
        if (matrix.length == 0) return ret1;
        
        int m = matrix.length;
        int n = matrix[0].length;
        int[] ret2 = new int[m * n];
        int row = 0;
        int col = 0;
        for (int i = 0; i < ret2.length; ++i) {
            ret2[i] = matrix[row][col];
            if ((row + col) % 2 == 0) {
                if (col == n-1) {
                    row++;
                } else if (row == 0) {
                    col++;
                } else {
                    row--;
                    col++;
                }
            } else {
                if (row == m-1) {
                    col++;
                } else if (col == 0) {
                    row++;
                } else {
                    row++;
                    col--;
                }
            }
        }
        return ret2;
    }
}





#######################参考解答##########################

# python3
class Solution:
    def findDiagonalOrder(self, matri):
        if matri == []: return []
        row, col = len(matri), len(matri[0])
        if row == 1: return matri[0]
        ans = []
        number = row * col
        up = True
        i = j = 0
        while number:
            number -= 1
            ans.append(matri[i][j])
            if up == True:
                if j == col - 1:
                    i += 1
                    up = False
                elif i == 0:
                    up = False
                    j += 1
                else:
                    i -= 1
                    j += 1
            else:
                if i == row - 1:
                    up = True
                    j += 1
                elif j == 0:
                    up = True
                    i += 1
                else:
                    i += 1
                    j -= 1
        return ans
   
   
   
   
        
# C++:
class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) 
    {
        if (matrix.empty()) return vector<int>();
        int rows = matrix.size();
        int cols = matrix[0].size();
        vector<int> output;
        int i = 0, j = 0;
        output.push_back(matrix[i][j]);
        while (i != rows - 1 || j != cols - 1)
        {          
            if (j + 1 < cols) j++;
            else if (i + 1 < rows) i++;
                output.push_back(matrix[i][j]);
            
            while (i + 1 < rows && j - 1 >= 0)   
            {
                i++;
                j--;
                output.push_back(matrix[i][j]);
            }
            
            if(i + 1 < rows) i++;
            else if (j + 1 < cols) j++;
            else return output;
            output.push_back(matrix[i][j]);
            
            while (i - 1 >= 0 && j + 1 < cols)   
            {
                i--;
                j++;
                output.push_back(matrix[i][j]);
            }    
            
        }
        return output;
        
    }
};
  
  
  


# Java
class Solution {
    public int[] findDiagonalOrder(int[][] matrix) {
        if (matrix.length == 0) {
            return new int[0];
        }
        int size = matrix[0].length * matrix.length;
        int i =0, j =0;
        int[] res = new int[size];
        boolean flag = true; //true 为右上 false为左下
        for (int k = 0; k < size; k++) {
            res[k] = matrix[i][j];
            if (flag) {//右上走
                if (i-1 >= 0 && j+1 < matrix[0].length) {
                    i--;
                    j++;
                } else if (j + 1 < matrix[0].length) { //遇到右边界， 向下走
                    j++;
                    flag = false;
                } else if (i+ 1 < matrix.length) {//遇到上边界， 向右
                    i++;
                    flag = false;
                }
            } else {//向左下
                if (j - 1 >=0 && i+1 < matrix.length) {
                    i++;
                    j--;
                } else if (i + 1 < matrix.length) {//遇到下边界,向右
                    i++;
                    flag = true;
                } else if (j + 1 < matrix[0].length) {//遇到左边界, 向下走
                    j++;
                    flag = true;
                }
            }
        }
        return res;
    }
}




