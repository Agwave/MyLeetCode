设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。

在链表类中实现这些功能：

get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。
addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。
addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。
addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。
deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。
 

示例：

MyLinkedList linkedList = new MyLinkedList();
linkedList.addAtHead(1);
linkedList.addAtTail(3);
linkedList.addAtIndex(1,2);   //链表变为1-> 2-> 3
linkedList.get(1);            //返回2
linkedList.deleteAtIndex(1);  //现在链表是1-> 3
linkedList.get(1);            //返回3
 

提示：

所有值都在 [1, 1000] 之内。
操作次数将在  [1, 1000] 之内。
请不要使用内置的 LinkedList 库。










####################自答#####################
# python3：72%
class Node(object):
    
    def __init__(self, x):
        """
        Initialize Node
        """
        self.val = x
        self.next = None
        self.pre = None

class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.head, self.tail = Node(0), Node(0)
        self.head.next = self.tail
        self.tail.pre = self.head
        self.len = 0
        

    def get(self, index: int) -> int:
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        """
        if index >= self.len or index < 0:
            return -1
        node = self.head.next
        for _ in range(index):
            node = node.next
        return node.val
                
        

    def addAtHead(self, val: int) -> None:
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        """
        newHead = Node(val)
        oldHead = self.head.next
        self.head.next = newHead
        newHead.next = oldHead
        newHead.pre = self.head
        oldHead.pre = newHead
        self.len += 1
        
        

    def addAtTail(self, val: int) -> None:
        """
        Append a node of value val to the last element of the linked list.
        """
        newTail = Node(val)
        oldTail = self.tail.pre
        oldTail.next = newTail
        newTail.next = self.tail
        newTail.pre = oldTail
        self.tail.pre = newTail
        self.len += 1

    def addAtIndex(self, index: int, val: int) -> None:
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        """
        if index <= self.len:
            nextNode = self.head.next
            for _ in range(index):
                nextNode = nextNode.next
            preNode = nextNode.pre
            node = Node(val)
            preNode.next = node
            node.pre = preNode
            node.next = nextNode
            nextNode.pre = node
            self.len += 1
        

    def deleteAtIndex(self, index: int) -> None:
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        if index >= 0 and index < self.len:
            node = self.head.next
            for _ in range(index):
                node = node.next
            preNode = node.pre
            nextNode = node.next
            preNode.next = nextNode
            nextNode.pre = preNode
            self.len -= 1


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)





# C++：70+%
class MyLinkedList {
public:
    /** Initialize your data structure here. */
    MyLinkedList() {
        head = new Node(0);
        tail = new Node(0);
        head->next = tail;
        tail->pre = head;
    }
    
    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
    int get(int index) {
        if (index < 0 || index >= size) return -1;
        Node* node = head->next;
        for (int i = 0; i < index; ++i) {
            node = node->next;
        }
        return node->val;
    }
    
    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
    void addAtHead(int val) {
        Node* oldHead = head->next;
        Node* newHead = new Node(val);
        head->next = newHead;
        newHead->pre = head;
        newHead->next = oldHead;
        oldHead->pre = newHead;
        size++;
    }
    
    /** Append a node of value val to the last element of the linked list. */
    void addAtTail(int val) {
        Node* oldTail = tail->pre;
        Node* newTail = new Node(val);
        oldTail->next = newTail;
        newTail->pre = oldTail;
        newTail->next = tail;
        tail->pre = newTail;
        size++;
    }
    
    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */
    void addAtIndex(int index, int val) {
        if (index <= size) {
            Node* nextNode = head->next;
            for (int i = 0; i < index; ++i) {
                nextNode = nextNode->next;
            }
            Node* node = new Node(val);
            Node* preNode = nextNode->pre;
            preNode->next = node;
            node->pre = preNode;
            node->next = nextNode;
            nextNode->pre = node;
            size++;
        }
    }
    
    /** Delete the index-th node in the linked list, if the index is valid. */
    void deleteAtIndex(int index) {
        if (index >= 0 && index < size) {
            Node* node = head->next;
            for (int i = 0; i < index; ++i) {
                node = node->next;
            }
            Node* preNode = node->pre;
            Node* nextNode = node->next;
            preNode->next = nextNode;
            nextNode->pre = preNode;
            size--;
        }
    }
    
private:
    struct Node {
        int val;
        Node* pre;
        Node* next;
        Node(int x): val(x), pre(NULL), next(NULL) {}
    };
    Node* head;
    Node* tail;
    int size = 0;
};

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */





# Java：









##########################参考解答#######################
# python3：
class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.linkedlist = list()

    def get(self, index: int) -> int:
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        """
        if index < 0 or index >= len(self.linkedlist):
            return -1
        else:
            return self.linkedlist[index]
        
    def addAtHead(self, val: int) -> None:
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        """
        self.linkedlist.insert(0, val)

    def addAtTail(self, val: int) -> None:
        """
        Append a node of value val to the last element of the linked list.
        """
        self.linkedlist.append(val)

    def addAtIndex(self, index: int, val: int) -> None:
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        """
        if index <= len(self.linkedlist):
            self.linkedlist.insert(index, val)

    def deleteAtIndex(self, index: int) -> None:
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        if 0 <= index and index < len(self.linkedlist):
            self.linkedlist.pop(index)


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)






# C++：
struct DListNode {
    int val;
    DListNode *prev, *next;
    DListNode(int val) : val(val), prev(nullptr), next(nullptr) {}
};

class MyLinkedList {
public:
    /** Initialize your data structure here. */
    MyLinkedList() : head_(nullptr), tail_(nullptr), size_(0) {}
    
    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
    int get(int index) {
        auto node = getNode(index);
        return node ? node->val : -1;
    }
    
    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
    void addAtHead(int val) {
        auto node = new DListNode(val);
        size_++;
        
        if (head_ == nullptr) 
        {
            tail_ = node;
        } 
        else 
        {
            node->next = head_;
            head_->prev = node;
        }
        head_ = node; 
    }
    
    /** Append a node of value val to the last element of the linked list. */
    void addAtTail(int val) {
        auto node = new DListNode(val);
        size_++;
        
        if (tail_ == nullptr) 
        {
            head_ = node;
        } 
        else 
        {
            tail_->next = node;
            node->prev = tail_;
        }
        tail_ = node;
    }
    
    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */
    void addAtIndex(int index, int val) {
        if (index > size_) return;
        if (index == size_) {
            addAtTail(val);
            return;
        }
        
        if (index <= 0) {
            addAtHead(val);
            return;
        }
        
        auto node = new DListNode(val);
        auto next = getNode(index);
        
        node->next = next;
        node->prev = next->prev;
        next->prev->next = node;
        next->prev = node;
        
        size_++;
    }
    
    /** Delete the index-th node in the linked list, if the index is valid. */
    void deleteAtIndex(int index) {
        if (auto node = getNode(index)) {
            if (node == head_) {
                head_ = head_->next;
                if (head_ != nullptr) head_->prev = nullptr;
                node->next = nullptr;
            }
            
            if (node == tail_) {
                tail_ = tail_->prev;
                if (tail_ != nullptr) tail_->next = nullptr;
                node->prev = nullptr;
            }
            
            if (node->next != nullptr) node->next->prev = node->prev;
            if (node->prev != nullptr) node->prev->next = node->next;

            delete node;
            size_--;
        }
    }
    
private:
    DListNode *getNode(int index) {
        if (index >= size_ || index < 0) return nullptr;
        
        DListNode *node;
        int i;
        
        if (size_ - index - 1 < index)  //后半部分查找
        {
            i = size_ - index - 1;
            node = tail_;
            while (i-- > 0)
            {
                node = node->prev;
            }
        } 
        else //前半部分查找
        {
            i = index;
            node = head_;
            while (i-- > 0)
            {
                node = node->next;
            }
        }
        
        return node;
    }
    
private:
    DListNode *head_;
    DListNode *tail_;
    int size_;
};






# Java：












