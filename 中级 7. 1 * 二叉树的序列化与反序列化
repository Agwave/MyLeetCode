序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。

请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。

示例: 

你可以将以下二叉树：

    1
   / \
  2   3
     / \
    4   5

序列化为 "[1,2,3,null,null,4,5]"

提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。

说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。









# 参考解答1：
class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        return root
            
    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        return data









# 参考解答2：
class Codec:
    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode 
        :rtype: str
        """
        self.level = collections.deque()
        self.ans = []
        if not root:
            return None
        def maxDepth(root):
            if not root:
                return 0
            left = maxDepth(root.left)
            right = maxDepth(root.right)
            return max(left, right) + 1
        maxdepth = maxDepth(root)
        
        depth = 1
        self.level.append((root, depth))
        while self.level:
            node = self.level.popleft()
            if node == '/':
                self.ans.append(node)
                continue
            self.ans.append(node[0])
            if node[0].left:
                self.level.append((node[0].left, node[1]+1))
            elif not node[0].left and node[1] < maxdepth:
                self.level.append('/')
            if node[0].right:
                self.level.append((node[0].right, node[1]+1))
            elif not node[0].right and node[1] < maxdepth:
                self.level.append('/')
        return self.ans
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if not data:
            return None
        self.level = collections.deque()
        self.store = collections.deque(data)
        root = self.store.popleft()
        self.level.append(root)
        while not self.level:
            if not self.store:
                break
            node = self.level.popleft()
            if node == '/':
                continue
            lchild = self.store.popleft()
            rchild = self.store.popleft()
            if lchild != '/':
                node.left = lchild
            else:
                node.left = None
            if rchild != '/':
                node.right = rchild
            else:
                rchild = None
            self.level.append(lchild)
            self.level.append(rchild)
        return root
















