罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。

字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。









# 自答（链表法）超过80%
class Solution:
    def romanToInt(self, s: str) -> int:
        L = []
        a = 0
        count = 0
        for greek in s:
            if greek == "M":
                a = 1000
            if greek == "D":
                a = 500
            if greek == "C":
                a = 100
            if greek == "L":
                a = 50
            if greek == "X":
                a =10
            if greek == "V":
                a = 5
            if greek == "I":
                a = 1
            L.append(a)
        for i in range(len(L)-1):
            if L[i] >= L[i+1]:
                count += L[i]
            else :
                count -= L[i]
        count += L[-1]
        return count








# 参考解答（替代法）
class Solution:
    def romanToInt(self, s: str) -> int:
        m=['CM','CD','XC','XL','IX','IV']
        n=['D','C','L','X','V','I']
        for i in (0,2,4):
            s=s.replace(m[i],n[i+1]*9)
            s=s.replace(m[i+1],n[i+1]*4)
            s=s.replace(n[i],n[i+1]*5)
        p=s.count('M')*1000+s.count('C')*100+s.count('X')*10+s.count('I')*1
        return p





# 参考解答（字典法）
class Solution:
    def romanToInt(self, s: str) -> int:
        ri_dic = {
            'I': 1,
            'V': 5,
            'X': 10,
            'L': 50,
            'C': 100,
            'D': 500,
            'M': 1000,
        }
        last_i = ret = 0
        for r in s:
            i = ri_dic[r]
            ret += i
            if last_i < i:
                ret -= last_i * 2
            last_i = i
        return ret
        
        
        
        







