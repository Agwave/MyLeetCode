给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
     
     
     
     
     
     
     
     
#######################自答##########################
# python3：81%
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        ret = 0
        start_index = 0
        str_index = {}
        for i, c in enumerate(s):
            if c in str_index:
                start_index = max(start_index, str_index[c] + 1)
            str_index[c] = i
            ret = max(ret, i - start_index + 1)
        return ret





# C++：33%
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char, int> str_index;
        int ret = 0;
        int start_index = 0;
        for (int i = 0; i < s.size(); ++i) {
            if (str_index.count(s[i]) > 0) 
                start_index = start_index > (str_index[s[i]] + 1) ? start_index: (str_index[s[i]] + 1);
            str_index[s[i]] = i;
            ret = ret > (i - start_index) ? ret: (i - start_index + 1);
        }
        return ret;
    }
};







####################参考解答#########################
# python3：
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        max_s,current_s = '',''
        for c in s:
            if c not in current_s:
                current_s = current_s + c
            else:
                if len(current_s) >= len(max_s):
                    max_s = current_s
                index = current_s.index(c)
                current_s = current_s[index + 1:] + c
        if len(current_s) >= len(max_s):
            max_s = current_s
        return len(max_s)






# C++：
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int  size,i=0,j,k,max=0;
        size = s.size();
        for(j = 0;j<size;j++){
            for(k = i;k<j;k++)
                if(s[k]==s[j]){
                    i = k+1;
                    break;
                }
            if(j-i+1 > max)
                max = j-i+1;
        }
        return max;
    }
};






