根据一棵树的前序遍历与中序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7











# 参考解答

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        if len(preorder) == 0:
            return None
        out = TreeNode(preorder[0])
        dic = {}
        for i,ele in enumerate(inorder):
            dic[ele] = i
        stack = [out]
        for i in range(1,len(preorder)):
            num = preorder[i]
            idx = dic[num]
            node = TreeNode(num)
            if idx < dic[stack[-1].val]:
                stack[-1].left = node
                stack.append(node)
            else:
                u = stack.pop()
                while stack and idx>dic[stack[-1].val]:
                    u = stack.pop()
                u.right = node
                stack.append(node)
        return out
