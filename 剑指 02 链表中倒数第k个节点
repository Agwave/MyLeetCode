输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。

 

示例：

给定一个链表: 1->2->3->4->5, 和 k = 2.

返回链表 4->5.


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


#################自答###############
# python：22%
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getKthFromEnd(self, head: ListNode, k: int) -> ListNode:
        slow = fast = head
        while k:
            fast = fast.next
            k -= 1
        while fast is not None:
            slow = slow.next
            fast = fast.next
        return slow



# C++：83%
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* getKthFromEnd(ListNode* head, int k) {
        if (head == nullptr || k < 1)
            return nullptr;
        ListNode* slow;
        ListNode* fast;
        slow = head;
        fast = head;
        while (k--)
            fast = fast->next;
        while (fast != nullptr) {
            slow = slow->next;
            fast = fast->next;
        }
        return slow;
    }
};




###############参考解答#################
# python：
class Solution:
    def getKthFromEnd(self, head: ListNode, k: int) -> ListNode:
        if not head or k < 1:
            return None
        
        pre, cur = head, head

        while cur:
            if k:
                cur, k = cur.next, k - 1
            else:
                pre, cur = pre.next, cur.next
        
        return pre



# C++：
class Solution {
public:
    ListNode* getKthFromEnd(ListNode* head, int k) {
        ListNode *p = head;
        int len=0;
        while(p!=NULL){
            len++;
            p = p->next;
        }
        for(int i=0;i<len-k;i++)
            head=head->next;
        return head;
    }
};


