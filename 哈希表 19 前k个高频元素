给定一个非空的整数数组，返回其中出现频率前 k 高的元素。

示例 1:

输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]
示例 2:

输入: nums = [1], k = 1
输出: [1]
说明：

你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。








###########################自答#########################
# C++：89%
class Solution {
public:
    static bool compare(pair<int, int>& a, pair<int, int>& b) {
            return a.second > b.second;
        }
    
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> ret;
        unordered_map<int, int> num_to_count;
        vector<pair<int, int>> num_count;
        for (int num: nums) {
            num_to_count[num]++;
        }
        for (auto it: num_to_count) {
            num_count.push_back(make_pair(it.first, it.second));
        }
        sort(num_count.begin(), num_count.end(), compare);
        for (int i = 0; i < k; ++i) {
            ret.push_back(num_count[i].first);
        }
        return ret;
    }
};









#######################参考解答#########################
# C++：
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> m;
        for(auto i:nums){
            m[i]++;
        }
        multimap<int,int,greater<int>> s;
        for(auto i:m){
            s.insert(make_pair(i.second,i.first));
        }
        vector<int> res;
        for(auto i:s){
            if(res.size()==k) break;
            res.push_back(i.second);
        }
        return res;
    }
};
