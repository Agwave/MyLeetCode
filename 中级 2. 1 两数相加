给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807









# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        p = l1
        q = l2
        l1_count = 0
        l2_count = 0
        
        while(p.next):
            l1_count += 1
            p = p.next
        while(q.next):
            l2_count += 1
            q = q.next
            
        sub = l1_count - l2_count
        while(sub>0):
            r = ListNode(0)
            q.next = r
            q = q.next
            sub -= 1
        while(sub<0):
            r = ListNode(0)
            p.next = r
            p = p.next
            sub += 1
            
        p = l1
        q = l2
        while(q):
            p.val += q.val
            if p.val >= 10:
                p.val -= 10
                if p.next:
                    p.next.val += 1
                else:
                    r = ListNode(1)
                    p.next = r
            p = p.next
            q = q.next
            
        return l1
