给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回锯齿形层次遍历如下：

[
  [3],
  [20,9],
  [15,7]
]








# 参考解答
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        if root is None:
            return []

        queue = list()
        queue.append((root,0))
        map = dict()
        while len(queue) > 0:
            node,level = queue.pop(0)#type:TreeNode,int
            
            if node is None:
                continue
                
            if level not in map.keys():
                map[level] = [node.val]
            else:
                map[level].append(node.val)
            
        
            queue.append((node.left, level + 1))
            queue.append((node.right, level + 1))

        keys = list(map.keys())
        keys.sort()
        result = list()
        for key in keys:
            if key % 2 == 1:
                map[key].reverse()
            result.append(map[key])
        return result
