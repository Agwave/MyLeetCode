








####################自答######################
# C++：75%
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if (nums.size() == 0) return vector<int> {-1, -1};
        
        int left = 0, right = nums.size()-1, mid;
        int left_ret = -1, right_ret = -1;
        
        while (left + 1 < right) {
            mid = left + (right - left) / 2;
            if (nums[mid] < target) left = mid + 1;
            else if (nums[mid] > target) right = mid - 1;
            else {
                if (nums[mid-1] == target) right = mid - 1;
                else {
                    left_ret = mid;
                    break;
                }
            }
        }
        
        if (left_ret == -1) {
            if (nums[right] == target) left_ret = right;
            if (nums[left] == target) left_ret = left;
        }
        
        
        left = 0;
        right = nums.size() - 1;
        
        while (left + 1 < right) {
            mid = left + (right - left) / 2;
            if (nums[mid] < target) left = mid + 1;
            else if (nums[mid] > target) right = mid - 1;
            else {
                if (nums[mid+1] == target) left = mid + 1;
                else {
                    right_ret = mid;
                    break;
                }
            }
        }
        
        if (right_ret == -1) {
            if (nums[left] == target) right_ret = left;
            if (nums[right] == target) right_ret = right;
        }
        
        return vector<int> {left_ret, right_ret};
    }
};








###################参考解答#####################
# C++：
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) 
    {
        vector<int> ans;
        int a,b;
        int low = 0;
        int high = nums.size();
        // 左边界
        while(low < high)
        {
            int mid = low + (high - low) / 2;
            if(nums[mid] == target)
                high = mid;
            else if(nums[mid] < target)
                low = mid + 1;
            else if(nums[mid] > target)
                high = mid;
        }
        if(high == nums.size())
            a = -1;
        else
            a = (nums[high] == target ? high : -1);
        
        low = 0;
        high = nums.size();
        // 右边界 [low, high)
        while(low < high)
        {
            int mid = low + (high - low) / 2;
            if(nums[mid] == target)
                low = mid + 1;
            else if (nums[mid] < target)
                low = mid + 1;
            else if (nums[mid] > target)
                high = mid;
        }
        if(low == 0)
            b = -1;
        else
            b = (nums[low - 1] == target ? low - 1 : -1);
        ans.push_back(a);
        ans.push_back(b);
        return ans;
        
    }
};




