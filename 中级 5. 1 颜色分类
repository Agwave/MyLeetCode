给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

注意:
不能使用代码库中的排序函数来解决这道题。

示例:

输入: [2,0,2,1,1,0]
输出: [0,0,1,1,2,2]
进阶：

一个直观的解决方案是使用计数排序的两趟扫描算法。
首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
你能想出一个仅使用常数空间的一趟扫描算法吗？









# 自答：
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        count = [0]*3
        for num in nums:
            if num == 0:
                count[0] += 1
            elif num == 1:
                count[1] += 1
            else:
                count[2] += 1
        for i in range(len(nums)):
            if i < count[0]:
                nums[i] = 0
            elif i < count[0]+count[1]:
                nums[i] = 1
            else:
                nums[i] = 2
                
                
                
                
                
                
                
                
                
                
                
参考解答：（进阶）
class Solution:
    def sortColors(self, nums: 'List[int]') -> 'None':
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)-1
        m = 0; i = 0
        while i <= n:
            if nums[i] == 0:
                nums[i],nums[m] = nums[m],nums[i]
                m += 1
                i += 1  #这里+1是因为如果nums[i] 为0 则就和前面换，但是换过来的肯定不是2，因为前面如果有
                        #2，则肯定已经被换到后面了，所以换过来的不是1就是0，如果是1 则肯定要+=1
                        #但是如果是0的话，代表目前为止还没有1出现，所以i也要+= 1
            elif nums[i] == 2:
                nums[i],nums[n] = nums[n],nums[i]
                n -= 1  #这里是因为从后面换过来的不一定是1，有可能是0所以i不能+=1，要继续判断，继续换
            else:
                i += 1
