给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), ..., (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。

示例 1:

输入: [1,4,3,2]

输出: 4
解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).
提示:

n 是正整数,范围在 [1, 10000].
数组中的元素范围在 [-10000, 10000].








########################自答######################
# python3
class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        nums.sort()
        ret = 0
        for i in range(0, len(nums), 2):
            ret += nums[i]
        return ret





# C++
class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        int n = nums.size();
        int ret = 0;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n; i += 2) {
            ret += nums[i];
        }
        return ret;
    }
};






# Java
class Solution {
    public int arrayPairSum(int[] nums) {
        int n = nums.length;
        int ret = 0;
        Arrays.sort(nums, 0, n);
        for (int i = 0; i < n; i += 2) {
            ret += nums[i];
        }
        return ret;
    }
}






########################参考解答########################
# python3
class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        return sum(sorted(nums)[::2])





# C++
class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        vector<int> v(20001, 0);
        for (int i=0; i<nums.size(); ++i) {
            int num = nums[i];
            v[num+10000]++;
        }
        int res = 0;
        int match = true;
        for (int key=0; key<v.size(); ++key) {
            int count = v[key];
            if (count == 0)
                continue;
            if (!match) {
                count--;
                match = true;
            }
            res += (key - 10000) * (count / 2);
            if (count % 2 == 1) {
                res += (key - 10000);
                match = false;
            }
        }
        return res;
    }
};






# Java
class Solution {
    public int arrayPairSum(int[] nums) {
        // 将nums数组的值映射到exist数组的索引上 实现O(n)复杂度的排序,以空间换时间
        int [] exist = new int[20001];
        int len = nums.length;
        for(int i=0; i<len; i++)
            exist[nums[i]+10000]++;
        
        int sum = 0;
        // 从第一个数开始加  各隔一个加一下
        boolean odd = true;
        for(int i=0; i<20001; i++){
            while(exist[i] > 0){
                if(odd){
                    // exist的索引即是nums的值
                    sum += i-10000;
                }
                odd = !odd;
                exist[i]--;
            }
        }
        return sum;
    }
}




