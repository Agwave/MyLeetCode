将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。

比如输入字符串为 "LEETCODEISHIRING" 行数为 3 时，排列如下：

L   C   I   R
E T O E S I I G
E   D   H   N
之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："LCIRETOESIIGEDHN"。

请你实现这个将字符串进行指定行数变换的函数：

string convert(string s, int numRows);
示例 1:

输入: s = "LEETCODEISHIRING", numRows = 3
输出: "LCIRETOESIIGEDHN"
示例 2:

输入: s = "LEETCODEISHIRING", numRows = 4
输出: "LDREOEIIECIHNTSG"
解释:

L     D     R
E   O E   I I
E C   I H   N
T     S     G


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/zigzag-conversion
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。








#################自答###############
# python：6%
class Solution:
    def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        ret = ''
        rows = []
        l = len(s)
        n = numRows
        k = l // (2*n-2)
        for i in range(n):
            t = ''
            if i == 0 or i == n-1:
                for j in range(k):
                    t += s[i + (2*n-2)*j]
                if i+(2*n-2)*k < l:
                    t += s[i+(2*n-2)*k]
            else:
                for j in range(k):
                    t += s[i + (2*n-2)*j]
                    t += s[2*n-2-i + (2*n-2)*j]
                if i+(2*n-2)*k < l:
                    t += s[i+(2*n-2)*k]
                if 2*n-2-i+(2*n-2)*k < l:
                    t += s[2*n-2-i+(2*n-2)*k]
            rows.append(t)
        for r in rows:
            ret += r
        return ret



###############参考解答#################
# python：
class Solution:
    def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        ret_s = ""
        length = len(s)
        max_gap = (numRows - 1)<<1
        # 第一行
        idx = 0
        while idx < length:
            ret_s += s[idx]
            idx += max_gap
        # 中间行
        for i in range(1, numRows-1):
            idx = i
            gap = (numRows - i - 1)<<1
            if gap == 0:
                gap = max_gap

            while idx < length:
                ret_s += s[idx]
                idx += gap
                gap = max_gap - gap
        # 最后一行
        idx = numRows-1
        while idx < length:
            ret_s += s[idx]
            idx += max_gap
        return ret_s
