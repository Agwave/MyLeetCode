给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。

说明: 叶子节点是指没有子节点的节点。

示例: 
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。






####################自答###################
# C++：81%
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if (root == nullptr) return false;
        return helper(root, sum);
    }

private:
    bool helper(TreeNode* node, int sum) {
        if (node->left == nullptr && node->right == nullptr) {
            return node->val == sum;
        } else if (node->left != nullptr && node->right != nullptr) {
            return helper(node->left, sum - node->val) || helper(node->right, sum - node->val);
        } else if (node->left != nullptr) {
            return helper(node->left, sum - node->val);
        } else {
            return helper(node->right, sum - node->val);
        }
    }
};







# python3：61%
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def hasPathSum(self, root: TreeNode, sum: int) -> bool:
        if root is None:
            return False
        
        flag = False
        queue = [(root, sum)]
        while queue:
            length = len(queue)
            for _ in range(length):
                node, num = queue.pop(0)
                if node.left is None and node.right is None:
                    flag = node.val == num
                if node.left is not None:
                    queue.append((node.left, num-node.val))
                if node.right is not None:
                    queue.append((node.right, num-node.val))
                if flag == True:
                    return True
        return False






####################参考解答####################
# C++：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  
bool hasPathSum(TreeNode* root, int sum)
{
	if (root == NULL)
		return false;
	else if (!root->left && !root->right)
		return root->val == sum;
	else
		return hasPathSum(root->left, sum - root->val) || hasPathSum(root->right, sum - root->val);
}
};






# python3：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def hasPathSum(self, root: TreeNode, sum: int) -> bool:
        '''
        if root==None:
            return False
        if root.left==None and root.right==None and sum-root.val==0:
            return True
        return self.hasPathSum(root.left,sum-root.val) or self.hasPathSum(root.right,sum-root.val)
        '''
        #非递归
        if not root:
            return False
        queue = [(root, root.val)]
        while queue:
            curr, val = queue.pop()
            if not curr.left and not curr.right:
                if val == sum:
                    return True
            if curr.left:
                queue.append((curr.left, val+curr.left.val))
            if curr.right:
                queue.append((curr.right, val+curr.right.val))
        return False




