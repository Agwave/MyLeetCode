给定一个二叉树，检查它是否是镜像对称的。

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3
说明:

如果你可以运用递归和迭代两种方法解决这个问题，会很加分。







# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        return self.ismirror(root, root)
    
    def ismirror(self, p, q):
        if p == None and q == None:
            return True
        
        elif p == None or q == None:
            return False
        
        elif p.val == q.val:
            return self.ismirror(p.left, q.right) and self.ismirror(p.right, q.left)
        
        else:
            return False


# 第一次复习
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if root == None:
            return True
        return(self.ismirror(root.left, root.right))
    def ismirror(self, lef, rig):
        if lef == None and rig == None:
            return True
        elif lef != None and rig == None:
            return False
        elif lef == None and rig != None:
            return False
        else:
            if lef.val != rig.val:
                return False
        
        return self.ismirror(lef.left, rig.right) and self.ismirror(lef.right, rig.left)
