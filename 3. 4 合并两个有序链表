将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4





# 我的解答
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy = ListNode(0)
        if l1 is None:
            return l2
        if l2 is None:
            return l1
        p = dummy
        p1 = l1
        p2 = l2
        
        while(p1 and p2):
            if p1.val <= p2.val:
                p.next = p1
                p = p.next
                p1 = p1.next    
            else:
                p.next = p2
                p = p.next
                p2 = p2.next
                       
        if p1 is None:
            p.next = p2
        else:
            p.next = p1
        
        return dummy.next
        
        



# 参考解答
class Solution:
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        if l1 is None and l2 is None:
            return None
        if l1 is None and l2 is not None:
            return l2
        if l1 is not None and l2 is None:
            return l1
        
        if l1.val > l2.val:
            l2.next = self.mergeTwoLists(l1, l2.next)
            return l2
        else:
            l1.next = self.mergeTwoLists(l1.next, l2)
            return l1
 
