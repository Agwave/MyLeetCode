打乱一个没有重复元素的数组。

示例:

// 以数字集合 1, 2 和 3 初始化数组。
int[] nums = {1,2,3};
Solution solution = new Solution(nums);

// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。
solution.shuffle();

// 重设数组到它的初始状态[1,2,3]。
solution.reset();

// 随机返回数组[1,2,3]打乱后的结果。
solution.shuffle();






# 看解答后自解
from random import choice
class Solution:

    def __init__(self, nums: List[int]):
        self.nums = nums

    def reset(self) -> List[int]:
        """
        Resets the array to its original configuration and return it.
        """
        return self.nums

    def shuffle(self) -> List[int]:
        """
        Returns a random shuffling of the array.
        """
        last_nums = self.nums.copy()
        new_nums = []
        while len(last_nums) > 0:
            choice_num = choice(last_nums)
            new_nums.append(choice_num)
            last_nums.remove(choice_num)
        return new_nums






# 参考解答
import random

class Solution:

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.__data = nums

    def reset(self):
        """
        Resets the array to its original configuration and return it.
        :rtype: List[int]
        """
        return self.__data

    def shuffle(self):
        """
        Returns a random shuffling of the array.
        :rtype: List[int]
        """
        ret = self.__data[:]
        random.shuffle(ret)
        return ret
