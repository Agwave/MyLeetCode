实现 strStr() 函数。

给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。

示例 1:

输入: haystack = "hello", needle = "ll"
输出: 2
示例 2:

输入: haystack = "aaaaa", needle = "bba"
输出: -1
说明:

当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。

对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。











###############################自答###################################

# python3（63%）
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle == "":
            return 0
        n_n = len(needle)
        n_h = len(haystack)
        for i in range(n_h):
            if haystack[i] == needle[0]:
                if i+n_n <= n_h and haystack[i:i+n_n] == needle:
                    return i
        return -1
        
        
        
        
        
        
# C++(98%)
class Solution {
public:
    int strStr(string haystack, string needle) {
        if (needle == "") return 0;
        
        int n_h = haystack.size();
        int n_n = needle.size();
        
        for (int i = 0; i < n_h - n_n + 1; ++i) {
            if (haystack[i] == needle[0]) {
                if (haystack.substr(i, n_n) == needle) {
                    return i;
                }
            }
        }
        return -1;
    }
};






# Java(78%)
class Solution {
    public int strStr(String haystack, String needle) {
        if (needle.length() == 0) return 0;
        
        int n_h = haystack.length();
        int n_n = needle.length();
        for (int i = 0; i < n_h - n_n + 1; ++i) {
            if (haystack.substring(i, i + n_n).equals(needle)) {
                return i;
            }
            
        }
        return -1;
    }
}






########################参考解答#################################

# python3
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        for i in range(len(haystack)-len(needle) + 1):
            if haystack[i: i+len(needle)] == needle:
                return i
        return -1


class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        return haystack.find(needle)


# C++
class Solution {
public:
    int strStr(string haystack, string needle) {
        if(needle.empty())
            return 0;
        int pos=haystack.find(needle);
        return pos;
    }
};






# Java
class Solution {
    public int strStr(String haystack, String needle) {
        return haystack.indexOf(needle);
    }
}




