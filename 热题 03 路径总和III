给定一个二叉树，它的每个结点都存放着一个整数值。

找出路径和等于给定数值的路径总数。

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。

二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

示例：

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

返回 3。和等于 8 的路径有:

1.  5 -> 3
2.  5 -> 2 -> 1
3.  -3 -> 11

###################参考自答################
# C++：5%
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        vector<int> sums;
        if (root == nullptr)
            return 0;
        return dfs(root, sums, sum);
    }

private:
    int dfs(TreeNode* node, vector<int>& sums, int sum) {
        int left = 0, right = 0, count = 0;
        vector<int> temp;
        for (int s: sums) {
            temp.push_back(s + node->val);
        }
        temp.push_back(node->val);
        
        if (node->left != nullptr)
            left += dfs(node->left, temp, sum);
        
        if (node->right != nullptr)
            right += dfs(node->right, temp, sum);
        
        for (int t: temp) {
            if (t == sum)
                count++;
        }
        
        return count + left + right;
    }
};








###################参考解答###################
# C++：
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        if (!root) return 0;
        vector<int> arr;
        int res = 0;
        dfs(root, sum, res, arr);
        return res;
    }
    
    void dfs(TreeNode* root, int sum, int& res, vector<int>& arr){
        arr.emplace_back(root->val);
        int temp = 0;
        for (int i = arr.size()-1; i >= 0; --i){
            temp += arr[i];
            if (temp == sum) res++;
        }
        if (root->left) dfs(root->left, sum, res, arr);
        if (root->right) dfs(root->right, sum, res, arr);
        arr.pop_back();
    }
};
