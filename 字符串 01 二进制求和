给定两个二进制字符串，返回他们的和（用二进制表示）。

输入为非空字符串且只包含数字 1 和 0。

示例 1:

输入: a = "11", b = "1"
输出: "100"
示例 2:

输入: a = "1010", b = "1011"
输出: "10101"





##########################自答#################################

# python3:
class Solution:
    def addBinary(self, a: str, b: str) -> str:
        s = str(int(a) + int(b))
        ret = ''
        sumList = [int(str) for str in s]
        for i in range(len(sumList)-1, -1, -1):
            if sumList[i] > 1:
                sumList[i] %= 2
                if i != 0:
                    sumList[i-1] += 1
                else:
                    sumList.insert(0, 1)
        for i in range(len(sumList)):
            ret += str(sumList[i])
        return ret







# C++:(别人解答）
class Solution {
public:
    string addBinary(string a, string b) {
        string res = "";
        int c = 0;
        int i = a.size() - 1;
        int j = b.size() - 1;
        while(i >= 0 || j>=0 || c==1){
            c += (i>=0 ? a[i--] - '0':0);
            c += (j>=0 ? b[j--] - '0':0);
            res = char(c%2 + '0') + res;
            c /= 2;
        }
        return res;
    }
};






# Java:(别人解答)
class Solution {
    public String addBinary(String a, String b) {
        StringBuilder result = new StringBuilder();
        
        int al = a.length()-1;
        int bl = b.length()-1;
        int carry = 0;
        
        while( al >=0  || bl >=0 )
        {
            int sum = carry;
            if(al >= 0)
            {
                sum += (a.charAt(al) - '0');
                al--;
            }
            if(bl >= 0)
            {
                sum += (b.charAt(bl) - '0');
                bl--;
            }
            result.append(sum%2);   //相加结果
            carry = sum /2;         //进位，如果是1那么carry=0，如果是2则要进位给下面一位+1
        }
        
        if(carry !=0 )              //都相加完了，还要进位的情况
            result.append(1);
        
        return result.reverse().toString();  //先反转，再输出
    }
}







###########################参考解答#######################

# python3：
class Solution:
    def addBinary(self, a: str, b: str) -> str:
        return bin(int(a, 2) + int(b, 2))[2:]
        
        
        
        




# C++:
class Solution {
public:
    string addBinary(string a, string b) {
        if(a.empty() && b.empty())
            return "";
        
        int m = a.size(),n = b.size();
       
         int carry = 0;
        //先让两个字符串同长(前位补0)
        if(m < n)
            a = string(n-m,'0') + a;
        else
            b = string(m-n,'0') + b;
        
        for(int i = a.size() - 1; i >= 0 ; i--){
            int sum = (a[i] - '0' + b[i] - '0' + carry);
            carry = sum/2;
            a[i] = sum%2 + '0';
        }
        
        if(carry > 0)
            a = string(1,'1') + a;
        
        return a;
    }
    
};








# Java:
class Solution {
    public String addBinary(String a, String b) {
        if (a.length() == b.length()) {

        } else if (a.length() > b.length()) {
            while (a.length() > b.length()) {
                b = "0" + b;
            }
        } else {
            while (a.length() < b.length()) {
                a = "0" + a;
            }
        }
        boolean shouldPlus = false;
        char[] chars = a.toCharArray();
        for (int i = a.length() - 1; i >= 0; i--) {
            if (chars[i] == '1' && b.charAt(i) == '1') {
                chars[i] = shouldPlus ? '1' : '0';
                shouldPlus = true;
            } else if (chars[i] == '0' && b.charAt(i) == '0') {
                chars[i] = shouldPlus ? '1' : '0';
                shouldPlus = false;
            } else {
                chars[i] = shouldPlus ? '0' : '1';
                shouldPlus = shouldPlus ? true : false;
            }
        }
        return (shouldPlus ? "1" : "") + new String(chars);
    }
}





