给定两个没有重复元素的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。

nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出-1。

示例 1:

输入: nums1 = [4,1,2], nums2 = [1,3,4,2].
输出: [-1,3,-1]
解释:
    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。
    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。
    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。
示例 2:

输入: nums1 = [2,4], nums2 = [1,2,3,4].
输出: [3,-1]
解释:
    对于num1中的数字2，第二个数组中的下一个较大数字是3。
    对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。
注意:

nums1和nums2中所有元素是唯一的。
nums1和nums2 的数组大小都不超过1000。



##############自答############
# python
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        ret = [-1] * len(nums1)
        for i, num1 in enumerate(nums1):
            flag = False
            for num2 in nums2:
                if flag:
                    if num1 < num2:
                        ret[i] = num2
                        break
                else:
                    if num1 == num2:
                        flag = True
        return ret
时间复杂度：O(N×M)，其中 M 和 N 分别是数组 nums1 和 nums2 的长度。
空间复杂度：O(M)，其中 M 是数组nums1的长度

###########参考解答############
# python
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        stack = []
        hashMap = {}
        for num in nums2:
            if stack == []:
                stack.append(num)
            else:
                if stack[-1] > num:
                    stack.append(num)
                else:
                    while stack != [] and stack[-1] < num:
                        hashMap[stack.pop()] = num
                    stack.append(num)
        print(hashMap)
        result = []
        for num in nums1:
            if num in hashMap:
                result.append(hashMap[num])
            else:
                result.append(-1)
        return result
        
      
思路：
维护一个单调栈，具体可看官方题解
复杂度分析

时间复杂度：O(M+N)，其中 MM 和 NN 分别是数组 nums1 和 nums2 的长度。

空间复杂度：O(N)。我们在遍历 nums2 时，需要使用栈，以及哈希映射用来临时存储答案。
