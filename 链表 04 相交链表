编写一个程序，找到两个单链表相交的起始节点。

如下面的两个链表：



在节点 c1 开始相交。

 

示例 1：



输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Reference of the node with value = 8
输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
 

示例 2：



输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
输出：Reference of the node with value = 2
输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。
 

示例 3：



输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
输出：null
输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。
解释：这两个链表不相交，因此返回 null。
 

注意：

如果两个链表没有交点，返回 null.
在返回结果后，两个链表仍须保持原有的结构。
可假定整个链表结构中没有循环。
程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。





##########################自答######################
# python3：56%
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        a, b = headA, headB
        countA, countB = 0, 0
        while a:
            a = a.next
            countA += 1
        while b:
            b = b.next
            countB += 1
        a, b = headA, headB
        if countA > countB:
            for _ in range(countA - countB):
                a = a.next
        else:
            for _ in range(countB- countA):
                b = b.next
        while a:
            if a is b:
                return a
            a = a.next
            b = b.next
        return None






# C++：11%
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* pa = headA;
        ListNode* pb = headB;
        
        while (pa != pb) {
            if (pa) {
                pa = pa->next;
            } else {
                pa = headB;
            }
            if (pb) {
                pb = pb->next;
            } else {
                pb = headA;
            }
        }
        return pa;
    }
};






# Java：96%
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode pa = headA;
        ListNode pb = headB;
        while (pa != pb) {
            if (pa != null) {
                pa = pa.next;
            } else {
                pa = headB;
            }
            if (pb != null) {
                pb = pb.next;
            } else {
                pb = headA;
            }
        }
        return pa;
    }
}






########################参考解答#######################
# python3：
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if headA is None or headB is None:
            return None
        pa = headA
        pb = headB

        while pa is not pb:
            pa = headB if pa is None else pa.next
            pb = headA if pb is None else pb.next
        return pa





# C++：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int lenA = 0, lenB = 0;
        ListNode *dummyA = new ListNode(0), *dummyB = new ListNode(0);
        dummyA->next = headA;
        dummyB->next = headB;
        while(headA) {
            lenA++;
            headA = headA->next;
        }
        while(headB) {
            lenB++;
            headB = headB->next;
        }
        headA = dummyA->next;
        headB = dummyB->next;
        if(lenA > lenB) {
            for(int i = 0; i < lenA - lenB; i++) {
                headA = headA->next;
            } 
        } else {
            for(int j = 0; j < lenB - lenA; j++) {
                headB = headB->next;
            }
        }
        while(headA != headB) {
            headA = headA->next;
            headB = headB->next;
            if(headA == headB) {
                return headA;
            } 
        }
        return headA;
    }
};





# Java：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int i=0,j=0;
        ListNode nodeA = headA;
        ListNode nodeB = headB;
        while(nodeA!=null)
        {
            nodeA = nodeA.next;
            i++;
        }
        while(nodeB != null)
        {
            nodeB = nodeB.next;
            j++;
        }
        
        if(i>j)
        {
            while(i>j)
            {
                  headA = headA.next;
                  j++;
            }
          
        }
        else
        {
            while(i<j)
            {
                headB = headB.next;
                i++;
            }
        }
        
        while(headA !=null && headB != null)
        {
            if(headA == headB)
                return headA;
            else
            {
                headA = headA.next;
                headB = headB.next;
            }
        }
        return null;
    }
}




