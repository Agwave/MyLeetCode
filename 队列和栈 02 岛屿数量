给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3









#######################自答#####################
# python3：23%
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        ret = 0
        n = len(grid)
        if n == 0: return 0
        m = len(grid[0])
        
        for i in range(n):
            for j in range(m):
                if grid[i][j] == '1':
                    ret += 1
                    self.setTag(grid, i, j)
        
        return ret
    
    
    def setTag(self, grid, row, col):
        n = len(grid)
        m = len(grid[0])
        if row<0 or row>=n or col<0 or col>=m or grid[row][col] != '1':
            return
        grid[row][col] = '#'
        self.setTag(grid, row-1, col)
        self.setTag(grid, row+1, col)
        self.setTag(grid, row, col-1)
        self.setTag(grid, row, col+1)









######################参考解答###################
# python3：
class Solution:
    def numIslands(self, g: List[List[str]]) -> int:
        m=len(g)
        if m==0:
            return 0
        n=len(g[0])
        
        g=[['0']*n]+g+[['0']*n]
        
        for i in range(m+2):
            g[i]=['0']+g[i]+['0']
        
        def f(i,j):
            g[i][j]='0'
            if g[i-1][j]=='1':f(i-1,j)
            if g[i+1][j]=='1':f(i+1,j)
            if g[i][j+1]=='1':f(i,j+1)
            if g[i][j-1]=='1':f(i,j-1)
        
        k=0
        for i in range(1,m+1):
            for j in range(1,n+1):
                if g[i][j]=='1':
                    k+=1
                    f(i,j)
        
        return k
        
        
        
        
        
