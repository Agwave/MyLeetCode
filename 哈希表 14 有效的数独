判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。


上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。










#####################自答#######################
# python3：9%
class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        class_to_row = {}
        class_to_col = {}
        class_to_square = {}
        for key in range(9):
            class_to_row[key] = set()
            class_to_col[key] = set()
            class_to_square[key] = set()
        
        for i in range(9):
            for j in range(9):
                cur = board[i][j]
                if cur != '.':
                    index = (i // 3)*3 + (j // 3) 
                    if cur in class_to_row[i] or cur in class_to_col[j] or cur in class_to_square[index]:
                        return False
                    class_to_row[i].add(cur)
                    class_to_col[j].add(cur)
                    class_to_square[index].add(cur)
        return True








# C++：17%
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        unordered_map<int, unordered_set<char>> class_to_row;
        unordered_map<int, unordered_set<char>> class_to_col;
        unordered_map<int, unordered_set<char>> class_to_square;
        char cur;
        int index;
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                cur = board[i][j];
                if (cur != '.') {
                    index = (i / 3) * 3 + (j / 3);
                    if (class_to_row[i].count(cur) > 0 || class_to_col[j].count(cur) > 0 || class_to_square[index].count(cur) > 0) return false;
                    class_to_row[i].insert(cur);
                    class_to_col[j].insert(cur);
                    class_to_square[index].insert(cur);
                }
            }                                    
        }
        return true;
    }
};









####################参考解答########################
# python3：
class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        # 元素以一个字典储存，key是数字，value统一为1
        dic_row=[{} for i in range(9)]
        dic_col=[{} for i in range(9)]
        dic_box=[{} for i in range(9)]
        for i in range(len(board)):
            for j in range (len(board)):
                num=board[i][j]
                if num=='.':
                    continue
                if num not in dic_row[i] and num not in dic_col[j] and num not in dic_box[3*(i//3)+(j//3)]:
                    dic_row[i][num]=1
                    dic_col[j][num]=1
                    dic_box[3*(i//3)+(j//3)][num]=1
                else:
                    return False
        return True







# C++:
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int row[9][9] = { 0 };
	int columns[9][9] = { 0 };
	int matrix[9][9] = { 0 };

	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			
			if (board[i][j] != '.') {

				int num = board[i][j] - '0' - 1;
				row[i][num]++;
				columns[j][num]++;
				matrix[(i / 3) * 3 + j / 3][num]++;
				if (row[i][num] == 2 || columns[j][num] == 2 || matrix[(i / 3) * 3 + j / 3][num]==2)
					return false;
			}
		}
	}
	return true;
    }
