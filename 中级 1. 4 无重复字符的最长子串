给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。












# 自答：（1000+ms）
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        Set = set()
        count = 0
        Max = 0
        for i in range(len(s)):
            if s[i] not in Set:
                Set.add(s[i])
                count += 1
            else:
                if Max < count:
                    Max = count
                Set = set(s[i])
                count = 1
                for j in range(i-1,0,-1):
                    if s[j] != s[i]:
                        count += 1
                        Set.add(s[j])
                    else:
                        break
        return Max if Max>count else count
        
        
        
        
        
        
        
# 参考解答：（60+ms）
class Solution:
    def lengthOfLongestSubstring(self, s: 'str') -> 'int':
        start = best = 0
        checked = {}
        for i in range(0, len(s)):
            if s[i] in checked and checked[s[i]] >= start:
                start = checked[s[i]] + 1
            else:
                if i+1-start > best:
                    best = i+1-start
            checked[s[i]] = i
            print(start)
            print(best)
            print(checked)
            print()
        return best

