输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。

 

示例 1：

输入：arr = [3,2,1], k = 2
输出：[1,2] 或者 [2,1]
示例 2：

输入：arr = [0,1,2,1], k = 1
输出：[0]
 

限制：

0 <= k <= arr.length <= 10000
0 <= arr[i] <= 10000


#################自答###############
# python：78%
class Solution:
    def getLeastNumbers(self, arr: List[int], k: int) -> List[int]:
        if k == 0:
            return list()
        
        arr = [-x for x in arr]
        hp = [x for x in arr[:k]]
        heapq.heapify(hp)
        
        for i in range(k, len(arr)):
            if hp[0] < arr[i]:
                heapq.heappop(hp)
                heapq.heappush(hp, arr[i])
                
        return [-x for x in hp]



# C++：33%
class Solution {
public:
    vector<int> getLeastNumbers(vector<int>& arr, int k) {
        vector<int> ret(k, 0);
        priority_queue<int> q;
        if (k == 0)
            return ret;
        
        for (int i = 0; i < k; i++)
            q.push(arr[i]);
        
        for (int i = k; i < arr.size(); i++) {
            if (q.top() > arr[i]) {
                q.pop();
                q.push(arr[i]);
            }
        }
        
        for (int i = 0; i < k; i++) {
            ret[i] = q.top();
            q.pop();
        }
        
        return ret;
    }
};




###############参考解答#################
# python：
class Solution:
    def getLeastNumbers(self, arr: List[int], k: int) -> List[int]:
        arr.sort()
        return arr[:k]



# C++：
class Solution {
public:
    void swap(int& x, int& y) {
        int tem = x;
        x = y;
        y = tem;
    }
    void adjustHeap(vector<int>& heap, int index) {
        for(int i = index; i * 2 + 1 < heap.size();) {
            int tem = i * 2 + 1;
            if(i * 2 + 2 < heap.size() && heap[i * 2 + 2] > heap[i * 2 + 1])
                tem = i * 2 + 2;
            if(heap[tem] <= heap[i])
                break;
            swap(heap[tem], heap[i]);
            i = tem;
        }
    }
    void buildHeap(vector<int>& heap) {
        for(int i = heap.size() / 2 - 1; i >= 0; --i) {
            adjustHeap(heap, i);
        }
    }
    vector<int> getLeastNumbers(vector<int>& arr, int k) {
        if(k == 0)
            return vector<int>(0);
        vector<int> kheap(arr.begin(), arr.begin() + k);
        buildHeap(kheap);
        for(int i = k; i < arr.size(); ++i) {
            if(arr[i] >= kheap[0])
                continue;
            kheap[0] = arr[i];
            adjustHeap(kheap, 0);
        }
        return kheap;
    }
};
